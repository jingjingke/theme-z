{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/1-160323111924548.png","path":"img/1-160323111924548.png","modified":1,"renderable":0},{"_id":"source/img/1-1605121UGT35.jpg","path":"img/1-1605121UGT35.jpg","modified":1,"renderable":0},{"_id":"source/img/1-160612110S3250.jpg","path":"img/1-160612110S3250.jpg","modified":1,"renderable":0},{"_id":"source/img/1-160S01A340309.png","path":"img/1-160S01A340309.png","modified":1,"renderable":0},{"_id":"source/img/1-16091013393b04.jpg","path":"img/1-16091013393b04.jpg","modified":1,"renderable":0},{"_id":"source/img/1-160S01A420530.png","path":"img/1-160S01A420530.png","modified":1,"renderable":0},{"_id":"source/img/1-16101Q14014F0.png","path":"img/1-16101Q14014F0.png","modified":1,"renderable":0},{"_id":"source/img/1-16111QI32NT.png","path":"img/1-16111QI32NT.png","modified":1,"renderable":0},{"_id":"source/img/1-1F310102229205.png","path":"img/1-1F310102229205.png","modified":1,"renderable":0},{"_id":"source/img/1-1F3211101030-L.png","path":"img/1-1F3211101030-L.png","modified":1,"renderable":0},{"_id":"source/img/1-1F5031625400-L.gif","path":"img/1-1F5031625400-L.gif","modified":1,"renderable":0},{"_id":"source/img/1-1F5021I6400-L.gif","path":"img/1-1F5021I6400-L.gif","modified":1,"renderable":0},{"_id":"themes/theme-z/source/css/hl-github.css","path":"css/hl-github.css","modified":1,"renderable":1},{"_id":"themes/theme-z/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/theme-z/source/demo/archive.html","path":"demo/archive.html","modified":1,"renderable":1},{"_id":"themes/theme-z/source/demo/detail.html","path":"demo/detail.html","modified":1,"renderable":1},{"_id":"themes/theme-z/source/demo/index.html","path":"demo/index.html","modified":1,"renderable":1},{"_id":"themes/theme-z/source/demo/list.html","path":"demo/list.html","modified":1,"renderable":1},{"_id":"themes/theme-z/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/theme-z/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/theme-z/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/theme-z/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/theme-z/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/theme-z/source/img/login.png","path":"img/login.png","modified":1,"renderable":1},{"_id":"themes/theme-z/source/js/pages.js","path":"js/pages.js","modified":1,"renderable":1},{"_id":"themes/theme-z/source/sass/style.scss","path":"sass/style.scss","modified":1,"renderable":1},{"_id":"themes/theme-z/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/theme-z/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/theme-z/README.md","hash":"82f0a222bfd1bde81ca9d728469c51ee8395069f","modified":1495441861525},{"_id":"themes/theme-z/_config.yml","hash":"1e9952da04b86c8343da982e60e3ae6db0b6f63f","modified":1495441447677},{"_id":"source/_posts/app-can-call-js-method.md","hash":"9c352173b95b42434d9cb8d97759bbb5b8a746e5","modified":1495520687016},{"_id":"source/_posts/background-position-percentage.md","hash":"73bdc92f965ecc291f0c6d8f7f183557c5d8f30a","modified":1495520782856},{"_id":"source/_posts/css-lines-overflow-ellipses.md","hash":"3b2e63d4b79bb487deee0fb9f130c64b74428108","modified":1495520679600},{"_id":"source/_posts/css-sticky-footer.md","hash":"20daab3278b5d290436b1aa5335d64a4bab15d6c","modified":1495520682912},{"_id":"source/_posts/css-text-half.md","hash":"52c64b8b410488a18f8c134f411c8fbc6eb0c083","modified":1495520629672},{"_id":"source/_posts/exit-the-login-flow-chart.md","hash":"b2a7e2eeeab6273deaa28ba3d65c42e405a98930","modified":1495520621680},{"_id":"source/_posts/js-amount-conversion-chinese.md","hash":"492ac7c9a88ea6a0bf0efa3b14bcffa452611842","modified":1495520623952},{"_id":"source/_posts/json-array-tree-nested.md","hash":"7c323980ffffd99665c72dd0384869ee9649bef5","modified":1495520626352},{"_id":"source/_posts/manage-vue-global-components.md","hash":"1ccd197f3c9b17755c5050362eba3388c58c7df2","modified":1495438325186},{"_id":"source/_posts/ps-set-shortcuts.md","hash":"511dba11c626396d7695bbd816d2d2104071fdd4","modified":1495520319552},{"_id":"source/_posts/repaint-and-reflow.md","hash":"5e4d2a4de04d2663a0cd23d56e99737aee2bba32","modified":1495520607922},{"_id":"source/_posts/vue2-uses-axios-instead-resource.md","hash":"e4b24b69ee6e15bfec84d174bd35447934d3d4c0","modified":1495520613392},{"_id":"source/img/1-160323111924548.png","hash":"d4500588fd0df9368e059377bb51cfc9e203b73b","modified":1495436514511},{"_id":"source/img/1-1605121UGT35.jpg","hash":"50b3006b1da5fecccbf6c776715dd666807dcb96","modified":1495434231146},{"_id":"source/img/1-160612110S3250.jpg","hash":"5974ba23ac65ab830dec327cfcd93607d9fa2f58","modified":1495435342011},{"_id":"source/img/1-160S01A340309.png","hash":"6482f73eba4268ab15ca34ae093dce11c2edc653","modified":1495439132432},{"_id":"source/img/1-16091013393b04.jpg","hash":"7ad4dc3cbc45445cb7039caa48e39202d739941f","modified":1495438763747},{"_id":"source/img/1-160S01A420530.png","hash":"7dbbac682603e40dad9cdc475982f133fc4a84fd","modified":1495439127278},{"_id":"source/img/1-16101Q14014F0.png","hash":"c86ce5d5c948953baf1dbea06449b5ef3dab8f8d","modified":1495436963284},{"_id":"source/img/1-16111QI32NT.png","hash":"064fca4e1178f1c83c40f4207fdc56cb37ec9ac2","modified":1495432448243},{"_id":"source/img/1-1F310102229205.png","hash":"d12cd29855f801c24d7d68904160bd3436a42a2e","modified":1495437454405},{"_id":"source/img/1-1F3211101030-L.png","hash":"5c114fe2222dd8461efeea87adab2954c795680e","modified":1495438420573},{"_id":"source/img/1-1F5031625400-L.gif","hash":"f6ad0d9ebdfadb93ec59742dd9153e10c0e2a776","modified":1495440128557},{"_id":"themes/theme-z/layout/archive.ejs","hash":"04dfecedce16bce2ca299ba3aafd2be8da02acb5","modified":1495443373358},{"_id":"themes/theme-z/layout/category.ejs","hash":"4d7ab9c9c09d92a5416d343bac689966e384534a","modified":1495423857626},{"_id":"themes/theme-z/layout/index.ejs","hash":"8a5aaf2171bc25f9f7502bfc016575d0094e19c7","modified":1495421386635},{"_id":"themes/theme-z/layout/layout.ejs","hash":"88236a7fd0242441837b45f94a723898f8f9d2fb","modified":1495418231292},{"_id":"themes/theme-z/layout/post.ejs","hash":"50b7c08257e32b283930359532d2388bc20f5588","modified":1495090901446},{"_id":"themes/theme-z/layout/tag.ejs","hash":"17413b5c482534f418591f398588996569b6e2e5","modified":1495422208022},{"_id":"source/img/1-1F5021I6400-L.gif","hash":"35e86102df7090076d3ac6547fb95d90883bf002","modified":1495440383968},{"_id":"themes/theme-z/layout/_partial/footer.ejs","hash":"5524e005722ba71cd377f9939152c4251337a771","modified":1495424829487},{"_id":"themes/theme-z/layout/_partial/header.ejs","hash":"b730868517761d2b28db1540a777b5bd02391be6","modified":1495419209442},{"_id":"themes/theme-z/layout/_partial/list.ejs","hash":"0294242668c8591b65f75b556ad282e454683493","modified":1495421398691},{"_id":"themes/theme-z/layout/_partial/list2.ejs","hash":"0cbdf54aeb8f63f24f9d4692ea2d1ded492fee88","modified":1495421441295},{"_id":"themes/theme-z/layout/_partial/paginator.ejs","hash":"0c44b858a0a65cf0e34dc02cd79526016cc34578","modified":1494837947280},{"_id":"themes/theme-z/layout/_partial/tdk.ejs","hash":"0ddfd9d118143c2f77643e9ae2239508531d3b60","modified":1495421224733},{"_id":"themes/theme-z/layout/_partial/menu.ejs","hash":"93cc45f1950ec91265c37d3e08a5c0c16e374e90","modified":1495095109896},{"_id":"themes/theme-z/source/css/hl-github.css","hash":"4d5ef3ec9533bf68f0d18b55c469435bbdd28dc3","modified":1494571903553},{"_id":"themes/theme-z/source/css/style.css","hash":"f8da7ac2316a1a4326156df55815b196d6f5decb","modified":1495433960566},{"_id":"themes/theme-z/source/demo/archive.html","hash":"c86dea98b76278daa60c5e1881e1627f825f10a0","modified":1495431219302},{"_id":"themes/theme-z/source/demo/detail.html","hash":"71ca9694f1fac95822537021446ba543d69a38d3","modified":1495431247341},{"_id":"themes/theme-z/source/demo/index.html","hash":"50945ddb2c1bd7bf50e6c517e9ed172e6a4ede46","modified":1495431280469},{"_id":"themes/theme-z/source/demo/list.html","hash":"8f9af1452ff7426c09223edfac6ecc9bbe1bc955","modified":1495431313157},{"_id":"themes/theme-z/source/fonts/iconfont.eot","hash":"3525d7638756a48a0967bb59ad1f8118ccbfef41","modified":1494469000000},{"_id":"themes/theme-z/source/fonts/iconfont.svg","hash":"11aa3ebf3ea2a1285f7394386f216ff2a3a1c901","modified":1494469000000},{"_id":"themes/theme-z/source/fonts/iconfont.ttf","hash":"81f374d7f85c49a091660813d7fa2ae0641fc1ae","modified":1494469000000},{"_id":"themes/theme-z/source/fonts/iconfont.woff","hash":"62ccd52b6357b14d7ba49f555f1af2fa7c0c989b","modified":1494469000000},{"_id":"themes/theme-z/source/img/favicon.ico","hash":"71e24df334eea1746b3e2769843a6e7b679d69b5","modified":1493370001709},{"_id":"themes/theme-z/source/img/login.png","hash":"ba99f16a2c96c8807a9fdee5150bee96e4686f10","modified":1495441394206},{"_id":"themes/theme-z/source/js/pages.js","hash":"d1db6f8ed7e4f3e3c48f72d95bc3961d6c4d2256","modified":1495188127531},{"_id":"themes/theme-z/source/sass/_common.scss","hash":"86b5c8579ba1adef6b976f36e93437237da8155f","modified":1495089501061},{"_id":"themes/theme-z/source/sass/_header.scss","hash":"b182c09bb6e9c973b92c2e2595f3c5327f37c9eb","modified":1494583358581},{"_id":"themes/theme-z/source/sass/_detail.scss","hash":"f8e187ba7c2a977a56f5ff96dab99718db5936ad","modified":1495433960009},{"_id":"themes/theme-z/source/sass/_footer.scss","hash":"f7be0b4cc9c262dcac3bf52ea86f9a1cca7fc36a","modified":1495101223646},{"_id":"themes/theme-z/source/sass/_main.scss","hash":"ac63008fa2da346b5a19ad4d5cf34c62d32379a1","modified":1495183263887},{"_id":"themes/theme-z/source/sass/_mixin.scss","hash":"2f891bcabda325d251064ee83bb04204b132b718","modified":1494560832967},{"_id":"themes/theme-z/source/sass/_menu.scss","hash":"38a8c2d195bd73a0c0d8d0f8d274f4f7d16c558d","modified":1495092556342},{"_id":"themes/theme-z/source/sass/_list.scss","hash":"dbf388edcb8146208b9ef44ece15f0930e41d37e","modified":1495421726285},{"_id":"themes/theme-z/source/sass/_paginator.scss","hash":"de4587aefef2837ff747f7a879fe3435b7372e07","modified":1494486617233},{"_id":"themes/theme-z/source/sass/_scroll.scss","hash":"09e85d187b98284b7344965f85e6107ca6b0ff84","modified":1494581679953},{"_id":"themes/theme-z/source/sass/style.scss","hash":"2387812385bdf983a5589eec415e467b302ee43b","modified":1494581269247},{"_id":"themes/theme-z/source/sass/_media.scss","hash":"b4b4c31ad4688f1db5f69968cce969c316823f9e","modified":1495422171046},{"_id":"themes/theme-z/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1494815590093},{"_id":"themes/theme-z/source/img/bg.jpg","hash":"2b6930f688a6df24da6283159d3eee65db31b1d4","modified":1494395911634},{"_id":"public/2017/05/03/json-array-tree-nested/index.html","hash":"cc0ab4a73c729ca8ccbd971968f10c37b1b7a2ea","modified":1495520839841},{"_id":"public/2017/05/02/css-sticky-footer/index.html","hash":"d6e14949ecd6929395b201e938c54a52b781c03f","modified":1495520839842},{"_id":"public/2017/03/21/exit-the-login-flow-chart/index.html","hash":"57c385afa3119346e66ba121d9b40ec52500a686","modified":1495520839842},{"_id":"public/2017/03/09/vue2-uses-axios-instead-resource/index.html","hash":"2ad812a68e1a866864e668f44a2026a6a596d953","modified":1495520839842},{"_id":"public/2017/03/06/manage-vue-global-components/index.html","hash":"2f03dc2464a6163aad4c58f2719048485d0f3dd4","modified":1495520839842},{"_id":"public/2016/11/18/css-text-half/index.html","hash":"b3d04bdc14adfdbed5e435c0b644138928c64d48","modified":1495520839842},{"_id":"public/2016/10/13/js-amount-conversion-chinese/index.html","hash":"d9d7421123b6d25c455c697590e5b155dd39e1f9","modified":1495520839842},{"_id":"public/2016/08/30/background-position-percentage/index.html","hash":"b6a44d7d2f3d82e87d2948790fa73c134807d816","modified":1495520839842},{"_id":"public/2016/08/09/app-can-call-js-method/index.html","hash":"df264ba972352aeead8da5fa88ad162b0eea12e5","modified":1495520839842},{"_id":"public/2016/05/20/repaint-and-reflow/index.html","hash":"45c778ba5fb7609b52f1d1b458a6c2ab5e0047a6","modified":1495520839843},{"_id":"public/2016/05/12/css-lines-overflow-ellipses/index.html","hash":"6a13962bff3c0aacb9da78a0a4e0222a17fb0ba4","modified":1495520839843},{"_id":"public/2016/03/23/ps-set-shortcuts/index.html","hash":"da06759cb1a5b09b06d662c7b66eccfa859b6ca5","modified":1495520839843},{"_id":"public/archives/index.html","hash":"ec775e4dfc2312b59caad0b79d56fe6e8beceaa6","modified":1495520839843},{"_id":"public/archives/2016/index.html","hash":"9564901ff906a6024de107d5216c29859b692bed","modified":1495520839843},{"_id":"public/archives/2016/03/index.html","hash":"977baabeda06b01ef25d251dbaf1e132e84a60b7","modified":1495520839843},{"_id":"public/archives/2016/05/index.html","hash":"d3d4bb1bb1a678f5c552ffa92d7fc739c460214f","modified":1495520839843},{"_id":"public/archives/2016/08/index.html","hash":"2d68e63197972dc0ef0a6daaf750d5ae695df6ca","modified":1495520839843},{"_id":"public/archives/2016/10/index.html","hash":"3cdb76a0cdd249d672f3f109d19c01e7c9f59cc8","modified":1495520839843},{"_id":"public/archives/2016/11/index.html","hash":"b32bb0b3da3a0c6906f1c2316d696a8acb1d9ec4","modified":1495520839843},{"_id":"public/archives/2017/index.html","hash":"b0670f7576c7a5ae15661a08121b78ec3f8dca9b","modified":1495520839843},{"_id":"public/archives/2017/03/index.html","hash":"536ebe8921beacbcb973ba024cdab9e36124a7a6","modified":1495520839843},{"_id":"public/archives/2017/05/index.html","hash":"54e7dcd1bbc6c872a6f14b4595441b8db9b276f0","modified":1495520839843},{"_id":"public/categories/前端笔记/index.html","hash":"683abdd5f046a7fe6cdb97c495200f97f2bf5516","modified":1495520839843},{"_id":"public/categories/前端笔记/page/2/index.html","hash":"0afb032cd9c42abdc00401131525ec24427ef7cc","modified":1495520839843},{"_id":"public/index.html","hash":"76674f6389fab57f8da2b5c246fecd139a1d446e","modified":1495520839843},{"_id":"public/page/2/index.html","hash":"f4dc4809386a34b0b0e1ba9d7812d9eedcf36ec7","modified":1495520839844},{"_id":"public/tags/JS/index.html","hash":"7b0f2752a5bb302fbfb3f347d31933699f8ca702","modified":1495520839844},{"_id":"public/tags/CSS/index.html","hash":"49a0866fbe980a8930a98797a503bfd0f1a6f012","modified":1495520839844},{"_id":"public/tags/逻辑/index.html","hash":"c165d2bd8ebb159cbf4e08ce64123a5920aca33c","modified":1495520839844},{"_id":"public/tags/VUE/index.html","hash":"d6645fe780e6a9872679d3f642a53baa97adf206","modified":1495520839844},{"_id":"public/tags/PS/index.html","hash":"0c8bddbae59d8406e97b64cd04dc9f1feb1e6f2d","modified":1495520839844},{"_id":"public/tags/性能/index.html","hash":"823b28f2e14ab3f8ea7d8b71fbcd0de1ac37a936","modified":1495520839844},{"_id":"public/img/1-160323111924548.png","hash":"d4500588fd0df9368e059377bb51cfc9e203b73b","modified":1495520839863},{"_id":"public/img/1-1605121UGT35.jpg","hash":"50b3006b1da5fecccbf6c776715dd666807dcb96","modified":1495520839863},{"_id":"public/img/1-160612110S3250.jpg","hash":"5974ba23ac65ab830dec327cfcd93607d9fa2f58","modified":1495520839863},{"_id":"public/img/1-160S01A340309.png","hash":"6482f73eba4268ab15ca34ae093dce11c2edc653","modified":1495520839863},{"_id":"public/img/1-160S01A420530.png","hash":"7dbbac682603e40dad9cdc475982f133fc4a84fd","modified":1495520839863},{"_id":"public/img/1-16101Q14014F0.png","hash":"c86ce5d5c948953baf1dbea06449b5ef3dab8f8d","modified":1495520839863},{"_id":"public/img/1-16091013393b04.jpg","hash":"7ad4dc3cbc45445cb7039caa48e39202d739941f","modified":1495520839863},{"_id":"public/img/1-16111QI32NT.png","hash":"064fca4e1178f1c83c40f4207fdc56cb37ec9ac2","modified":1495520839863},{"_id":"public/img/1-1F310102229205.png","hash":"d12cd29855f801c24d7d68904160bd3436a42a2e","modified":1495520839863},{"_id":"public/img/1-1F3211101030-L.png","hash":"5c114fe2222dd8461efeea87adab2954c795680e","modified":1495520839863},{"_id":"public/img/1-1F5031625400-L.gif","hash":"f6ad0d9ebdfadb93ec59742dd9153e10c0e2a776","modified":1495520839863},{"_id":"public/fonts/iconfont.eot","hash":"3525d7638756a48a0967bb59ad1f8118ccbfef41","modified":1495520839864},{"_id":"public/fonts/iconfont.svg","hash":"11aa3ebf3ea2a1285f7394386f216ff2a3a1c901","modified":1495520839864},{"_id":"public/fonts/iconfont.ttf","hash":"81f374d7f85c49a091660813d7fa2ae0641fc1ae","modified":1495520839864},{"_id":"public/fonts/iconfont.woff","hash":"62ccd52b6357b14d7ba49f555f1af2fa7c0c989b","modified":1495520839864},{"_id":"public/img/favicon.ico","hash":"71e24df334eea1746b3e2769843a6e7b679d69b5","modified":1495520839864},{"_id":"public/img/login.png","hash":"ba99f16a2c96c8807a9fdee5150bee96e4686f10","modified":1495520839864},{"_id":"public/sass/style.scss","hash":"2387812385bdf983a5589eec415e467b302ee43b","modified":1495520839864},{"_id":"public/css/hl-github.css","hash":"b439dbbc0e1fbf666d21194af9242414dee5494d","modified":1495520839878},{"_id":"public/demo/index.html","hash":"6da16aaf995352584e8434323c78819c27ebe240","modified":1495520839878},{"_id":"public/demo/list.html","hash":"5870ac7619ee48ad234347db4c898a67e556c68d","modified":1495520839878},{"_id":"public/js/pages.js","hash":"314a5008d672a4067c662ec4fb3e81aae1eff231","modified":1495520839878},{"_id":"public/demo/archive.html","hash":"a1deb61b882b0ea5796959c40670b6250902722d","modified":1495520839878},{"_id":"public/demo/detail.html","hash":"6a1b441520d6c94156e91a55d566a9c7d8f218e9","modified":1495520839878},{"_id":"public/css/style.css","hash":"0626a6a6b4d9029dbe4a905c5fd201e2c8746acb","modified":1495520839878},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1495520839878},{"_id":"public/img/1-1F5021I6400-L.gif","hash":"35e86102df7090076d3ac6547fb95d90883bf002","modified":1495520839878},{"_id":"public/img/bg.jpg","hash":"2b6930f688a6df24da6283159d3eee65db31b1d4","modified":1495520839881}],"Category":[{"name":"前端笔记","_id":"cj316hsvs0002xcv9ymuqnese"}],"Data":[],"Page":[],"Post":[{"title":"安卓APP中可以调用JS方法","date":"2016-08-09T07:39:56.000Z","_content":"通过JS可以在APP嵌套的页面中调用安卓自定义的方法，同理安卓也可以执行JS自定义的函数（方法）。![安卓APP中可以调用JS方法配图](/public/img/1-16091013393b04.jpg)这两天在调试嵌套在APP中的页面，学（zhe）习（mo）之后，感觉还是有点进步的，其中第一次接触到安卓执行页面中的JS，感觉这个用处满大的。\n\nJS调用安卓自定义的方法：\n```js\nandroid.funName()\n```\n而安卓中也调用网页中的方法：\n\n```js\nCallfunction(){\n    webview.loadUrl(\"javascript: funName(这里也可以传参)\");\n}\n```\n这次项目主要针对安卓4.4.4版本input调不到图片而无法正常显示图片缩略图的BUG，通过安卓本身将选择的图片上传服务器，当图片上传成功后执行JS自定义的函数并返回url值给我来生成缩略图。\n\n简写了一个比较简单的过程，这样比较好理解\n\n```js\n//安卓开发人员写的代码：\nCallfunction(){\n  webview.loadUrl(\"javascript: getAndroidImg(上传成功后获取到的地址)\");\n}\n \n//前端写的代码：\nfunction getAndroidImg(imgUrl){\n  $('#otherUpload').prepend('<img src=\"' + imgUrl + '\">');\n}\n```","source":"_posts/app-can-call-js-method.md","raw":"---\ntitle: 安卓APP中可以调用JS方法\ndate: 2016-08-09 15:39:56\ncategories:\n- 前端笔记\ntags:\n- JS\n---\n通过JS可以在APP嵌套的页面中调用安卓自定义的方法，同理安卓也可以执行JS自定义的函数（方法）。![安卓APP中可以调用JS方法配图](/public/img/1-16091013393b04.jpg)这两天在调试嵌套在APP中的页面，学（zhe）习（mo）之后，感觉还是有点进步的，其中第一次接触到安卓执行页面中的JS，感觉这个用处满大的。\n\nJS调用安卓自定义的方法：\n```js\nandroid.funName()\n```\n而安卓中也调用网页中的方法：\n\n```js\nCallfunction(){\n    webview.loadUrl(\"javascript: funName(这里也可以传参)\");\n}\n```\n这次项目主要针对安卓4.4.4版本input调不到图片而无法正常显示图片缩略图的BUG，通过安卓本身将选择的图片上传服务器，当图片上传成功后执行JS自定义的函数并返回url值给我来生成缩略图。\n\n简写了一个比较简单的过程，这样比较好理解\n\n```js\n//安卓开发人员写的代码：\nCallfunction(){\n  webview.loadUrl(\"javascript: getAndroidImg(上传成功后获取到的地址)\");\n}\n \n//前端写的代码：\nfunction getAndroidImg(imgUrl){\n  $('#otherUpload').prepend('<img src=\"' + imgUrl + '\">');\n}\n```","slug":"app-can-call-js-method","published":1,"updated":"2017-05-23T06:24:47.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsvk0000xcv9frlpzee7","content":"<p>通过JS可以在APP嵌套的页面中调用安卓自定义的方法，同理安卓也可以执行JS自定义的函数（方法）。<img src=\"/public/img/1-16091013393b04.jpg\" alt=\"安卓APP中可以调用JS方法配图\">这两天在调试嵌套在APP中的页面，学（zhe）习（mo）之后，感觉还是有点进步的，其中第一次接触到安卓执行页面中的JS，感觉这个用处满大的。</p>\n<p>JS调用安卓自定义的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">android.funName()</div></pre></td></tr></table></figure></p>\n<p>而安卓中也调用网页中的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Callfunction()&#123;</div><div class=\"line\">    webview.loadUrl(<span class=\"string\">\"javascript: funName(这里也可以传参)\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这次项目主要针对安卓4.4.4版本input调不到图片而无法正常显示图片缩略图的BUG，通过安卓本身将选择的图片上传服务器，当图片上传成功后执行JS自定义的函数并返回url值给我来生成缩略图。</p>\n<p>简写了一个比较简单的过程，这样比较好理解</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安卓开发人员写的代码：</span></div><div class=\"line\">Callfunction()&#123;</div><div class=\"line\">  webview.loadUrl(<span class=\"string\">\"javascript: getAndroidImg(上传成功后获取到的地址)\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//前端写的代码：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAndroidImg</span>(<span class=\"params\">imgUrl</span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#otherUpload'</span>).prepend(<span class=\"string\">'&lt;img src=\"'</span> + imgUrl + <span class=\"string\">'\"&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>通过JS可以在APP嵌套的页面中调用安卓自定义的方法，同理安卓也可以执行JS自定义的函数（方法）。<img src=\"/public/img/1-16091013393b04.jpg\" alt=\"安卓APP中可以调用JS方法配图\">这两天在调试嵌套在APP中的页面，学（zhe）习（mo）之后，感觉还是有点进步的，其中第一次接触到安卓执行页面中的JS，感觉这个用处满大的。</p>\n<p>JS调用安卓自定义的方法：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">android.funName()</div></pre></td></tr></table></figure></p>\n<p>而安卓中也调用网页中的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Callfunction()&#123;</div><div class=\"line\">    webview.loadUrl(<span class=\"string\">\"javascript: funName(这里也可以传参)\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这次项目主要针对安卓4.4.4版本input调不到图片而无法正常显示图片缩略图的BUG，通过安卓本身将选择的图片上传服务器，当图片上传成功后执行JS自定义的函数并返回url值给我来生成缩略图。</p>\n<p>简写了一个比较简单的过程，这样比较好理解</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安卓开发人员写的代码：</span></div><div class=\"line\">Callfunction()&#123;</div><div class=\"line\">  webview.loadUrl(<span class=\"string\">\"javascript: getAndroidImg(上传成功后获取到的地址)\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//前端写的代码：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAndroidImg</span>(<span class=\"params\">imgUrl</span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#otherUpload'</span>).prepend(<span class=\"string\">'&lt;img src=\"'</span> + imgUrl + <span class=\"string\">'\"&gt;'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"CSS多行文本溢出显示省略号","date":"2016-05-12T06:22:29.000Z","_content":"大部分童鞋都知道CSS单行文本溢出显示省略号的方法是text-overflow:ellipsis;，那么多行文本溢出显示省略号的方法是什么呢？了解一下吧~![CSS多行文本溢出显示省略号配图](/public/img/1-1605121UGT35.jpg)\n## 单行文本溢出 ##\n利用CSS控制当单行文溢出时显示省略号，前提是元素需要是块元素。代码如下：\n```CSS\noverflow:hidden; white-space:nowrap; text-overflow:ellipsis;\n```\n如果元素为内联元素的话则需要转变为块元素：\n```CSS\noverflow:hidden; white-space:nowrap; text-overflow:ellipsis; display:block;\n```\n可以说CSS单行文本溢出显示省略号可以满足我们大部的需求，比较广泛的就是在单行标题上的应用。\n\n## 多行文本溢出 ##\n利用CSS控制多行文本溢出显示省略号相较于上者，因为使用了WebKit的CSS扩展属性，较上者（单行文本溢出使用的CSS3新属性）兼容性要差点，该方法适用于WebKit浏览器及移动端。具体代码如下：\n```CSS\ndisplay:-webkit-box; overflow:hidden; text-overflow:ellipsis; -webkit-line-clamp:2; -webkit-box-orient:vertical;\n```\n这种方法无关乎元素为内联或块，不过为了让高度在各浏览器中显示差异的最小化，最好给元素添加高度和行高（高度是行高的整数倍，这个倍数值与设置的行数要一致），并且如果是内联元素则转变为块元素。\n```CSS\ndisplay:block; height:3em; line-height:1.5em;\ndisplay:-webkit-box; overflow:hidden; text-overflow:ellipsis; -webkit-line-clamp:2; -webkit-box-orient:vertical; \n```\n看一下各属性/值的意思：\n```pre\ndisplay:-webkit-box;     //必须结合的属性，将对象作为弹性伸缩盒子模型显示\n-webkit-line-clamp       //用来限制在一个块元素显示的文本的行数（为了实现该效果，它需要组合其他的WebKit属性\n-webkit-box-orient       //必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式\n```\n更多关于用样式设置/JS设置多行溢出显示省略号的方案可以参考下面的链接：[点击这里](http://www.css88.com/archives/5206)","source":"_posts/css-lines-overflow-ellipses.md","raw":"---\ntitle: CSS多行文本溢出显示省略号\ndate: 2016-05-12 14:22:29\ncategories:\n- 前端笔记\ntags:\n- CSS\n---\n大部分童鞋都知道CSS单行文本溢出显示省略号的方法是text-overflow:ellipsis;，那么多行文本溢出显示省略号的方法是什么呢？了解一下吧~![CSS多行文本溢出显示省略号配图](/public/img/1-1605121UGT35.jpg)\n## 单行文本溢出 ##\n利用CSS控制当单行文溢出时显示省略号，前提是元素需要是块元素。代码如下：\n```CSS\noverflow:hidden; white-space:nowrap; text-overflow:ellipsis;\n```\n如果元素为内联元素的话则需要转变为块元素：\n```CSS\noverflow:hidden; white-space:nowrap; text-overflow:ellipsis; display:block;\n```\n可以说CSS单行文本溢出显示省略号可以满足我们大部的需求，比较广泛的就是在单行标题上的应用。\n\n## 多行文本溢出 ##\n利用CSS控制多行文本溢出显示省略号相较于上者，因为使用了WebKit的CSS扩展属性，较上者（单行文本溢出使用的CSS3新属性）兼容性要差点，该方法适用于WebKit浏览器及移动端。具体代码如下：\n```CSS\ndisplay:-webkit-box; overflow:hidden; text-overflow:ellipsis; -webkit-line-clamp:2; -webkit-box-orient:vertical;\n```\n这种方法无关乎元素为内联或块，不过为了让高度在各浏览器中显示差异的最小化，最好给元素添加高度和行高（高度是行高的整数倍，这个倍数值与设置的行数要一致），并且如果是内联元素则转变为块元素。\n```CSS\ndisplay:block; height:3em; line-height:1.5em;\ndisplay:-webkit-box; overflow:hidden; text-overflow:ellipsis; -webkit-line-clamp:2; -webkit-box-orient:vertical; \n```\n看一下各属性/值的意思：\n```pre\ndisplay:-webkit-box;     //必须结合的属性，将对象作为弹性伸缩盒子模型显示\n-webkit-line-clamp       //用来限制在一个块元素显示的文本的行数（为了实现该效果，它需要组合其他的WebKit属性\n-webkit-box-orient       //必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式\n```\n更多关于用样式设置/JS设置多行溢出显示省略号的方案可以参考下面的链接：[点击这里](http://www.css88.com/archives/5206)","slug":"css-lines-overflow-ellipses","published":1,"updated":"2017-05-23T06:24:39.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsvp0001xcv989yrvhuc","content":"<p>大部分童鞋都知道CSS单行文本溢出显示省略号的方法是text-overflow:ellipsis;，那么多行文本溢出显示省略号的方法是什么呢？了解一下吧~<img src=\"/public/img/1-1605121UGT35.jpg\" alt=\"CSS多行文本溢出显示省略号配图\"></p>\n<h2 id=\"单行文本溢出\"><a href=\"#单行文本溢出\" class=\"headerlink\" title=\"单行文本溢出\"></a>单行文本溢出</h2><p>利用CSS控制当单行文溢出时显示省略号，前提是元素需要是块元素。代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">white-space</span><span class=\"selector-pseudo\">:nowrap</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</div></pre></td></tr></table></figure></p>\n<p>如果元素为内联元素的话则需要转变为块元素：<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">white-space</span><span class=\"selector-pseudo\">:nowrap</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>; <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:block</span>;</div></pre></td></tr></table></figure></p>\n<p>可以说CSS单行文本溢出显示省略号可以满足我们大部的需求，比较广泛的就是在单行标题上的应用。</p>\n<h2 id=\"多行文本溢出\"><a href=\"#多行文本溢出\" class=\"headerlink\" title=\"多行文本溢出\"></a>多行文本溢出</h2><p>利用CSS控制多行文本溢出显示省略号相较于上者，因为使用了WebKit的CSS扩展属性，较上者（单行文本溢出使用的CSS3新属性）兼容性要差点，该方法适用于WebKit浏览器及移动端。具体代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:-webkit-box</span>; <span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>; <span class=\"selector-tag\">-webkit-line-clamp</span><span class=\"selector-pseudo\">:2</span>; <span class=\"selector-tag\">-webkit-box-orient</span><span class=\"selector-pseudo\">:vertical</span>;</div></pre></td></tr></table></figure></p>\n<p>这种方法无关乎元素为内联或块，不过为了让高度在各浏览器中显示差异的最小化，最好给元素添加高度和行高（高度是行高的整数倍，这个倍数值与设置的行数要一致），并且如果是内联元素则转变为块元素。<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:block</span>; <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:3em</span>; <span class=\"selector-tag\">line-height</span><span class=\"selector-pseudo\">:1.5em</span>;</div><div class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:-webkit-box</span>; <span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>; <span class=\"selector-tag\">-webkit-line-clamp</span><span class=\"selector-pseudo\">:2</span>; <span class=\"selector-tag\">-webkit-box-orient</span><span class=\"selector-pseudo\">:vertical</span>;</div></pre></td></tr></table></figure></p>\n<p>看一下各属性/值的意思：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">display:-webkit-box;     //必须结合的属性，将对象作为弹性伸缩盒子模型显示</div><div class=\"line\">-webkit-line-clamp       //用来限制在一个块元素显示的文本的行数（为了实现该效果，它需要组合其他的WebKit属性</div><div class=\"line\">-webkit-box-orient       //必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式</div></pre></td></tr></table></figure></p>\n<p>更多关于用样式设置/JS设置多行溢出显示省略号的方案可以参考下面的链接：<a href=\"http://www.css88.com/archives/5206\" target=\"_blank\" rel=\"external\">点击这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>大部分童鞋都知道CSS单行文本溢出显示省略号的方法是text-overflow:ellipsis;，那么多行文本溢出显示省略号的方法是什么呢？了解一下吧~<img src=\"/public/img/1-1605121UGT35.jpg\" alt=\"CSS多行文本溢出显示省略号配图\"></p>\n<h2 id=\"单行文本溢出\"><a href=\"#单行文本溢出\" class=\"headerlink\" title=\"单行文本溢出\"></a>单行文本溢出</h2><p>利用CSS控制当单行文溢出时显示省略号，前提是元素需要是块元素。代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">white-space</span><span class=\"selector-pseudo\">:nowrap</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</div></pre></td></tr></table></figure></p>\n<p>如果元素为内联元素的话则需要转变为块元素：<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">white-space</span><span class=\"selector-pseudo\">:nowrap</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>; <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:block</span>;</div></pre></td></tr></table></figure></p>\n<p>可以说CSS单行文本溢出显示省略号可以满足我们大部的需求，比较广泛的就是在单行标题上的应用。</p>\n<h2 id=\"多行文本溢出\"><a href=\"#多行文本溢出\" class=\"headerlink\" title=\"多行文本溢出\"></a>多行文本溢出</h2><p>利用CSS控制多行文本溢出显示省略号相较于上者，因为使用了WebKit的CSS扩展属性，较上者（单行文本溢出使用的CSS3新属性）兼容性要差点，该方法适用于WebKit浏览器及移动端。具体代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:-webkit-box</span>; <span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>; <span class=\"selector-tag\">-webkit-line-clamp</span><span class=\"selector-pseudo\">:2</span>; <span class=\"selector-tag\">-webkit-box-orient</span><span class=\"selector-pseudo\">:vertical</span>;</div></pre></td></tr></table></figure></p>\n<p>这种方法无关乎元素为内联或块，不过为了让高度在各浏览器中显示差异的最小化，最好给元素添加高度和行高（高度是行高的整数倍，这个倍数值与设置的行数要一致），并且如果是内联元素则转变为块元素。<br><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:block</span>; <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:3em</span>; <span class=\"selector-tag\">line-height</span><span class=\"selector-pseudo\">:1.5em</span>;</div><div class=\"line\"><span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:-webkit-box</span>; <span class=\"selector-tag\">overflow</span><span class=\"selector-pseudo\">:hidden</span>; <span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>; <span class=\"selector-tag\">-webkit-line-clamp</span><span class=\"selector-pseudo\">:2</span>; <span class=\"selector-tag\">-webkit-box-orient</span><span class=\"selector-pseudo\">:vertical</span>;</div></pre></td></tr></table></figure></p>\n<p>看一下各属性/值的意思：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">display:-webkit-box;     //必须结合的属性，将对象作为弹性伸缩盒子模型显示</div><div class=\"line\">-webkit-line-clamp       //用来限制在一个块元素显示的文本的行数（为了实现该效果，它需要组合其他的WebKit属性</div><div class=\"line\">-webkit-box-orient       //必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式</div></pre></td></tr></table></figure></p>\n<p>更多关于用样式设置/JS设置多行溢出显示省略号的方案可以参考下面的链接：<a href=\"http://www.css88.com/archives/5206\" target=\"_blank\" rel=\"external\">点击这里</a></p>\n"},{"title":"CSS伪类实现文字颜色对半","date":"2016-11-18T05:52:30.000Z","_content":"CSS不仅是一种技术，也是一种艺术，在这个领域中你有更大的空间和可能性来发挥自己的奇思妙想，今天用CSS给文字上一半的颜色，才发现CSS伪类真是无处不在。![CSS伪类实现文字颜色对半效果图](/public/img/1-16111QI32NT.png)CSS实现文字颜色对半，其实说到底还是将伪类显示一半，上色后放到原来的字上面，从正面看到的效果就是这个文字被分了两半，一半是上色后的，一半是原来的颜色。仔细看一下代码，感觉还是很容易理解的！\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>CSS伪类实现文字颜色对半</title>\n  <style>\n    body { margin: 0; padding: 0; padding-top: 200px; text-align: center;}\n    span {\n      font-size: 120px;\n      display: inline-block; /*需要这种布局*/\n      position: relative;\n    }\n    span:after {\n      display: block;\n      content:attr(data-content);\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 2;\n      color:dodgerblue;\n      width: 50%;\n      overflow: hidden;\n    }\n  </style>\n</head>\n<body>\n  <span>美</span><span>丽</span><span>人</span><span>生</span>\n  <script src=\"http://www.jingjingke.com/res/js/jquery.min.js\"></script>\n  <script>\n    $('span').each(function(){\n      $(this).attr('data-content',$(this).text());\n    });\n  </script>\n</body>\n</html>\n```\n这个是简化后的代码，[点击原文链接](http://www.webhek.com/css-half-character/)\n\n因为原文可能讲得比较多一些，我自己做的时候就能省则省了。兼容没怎么考虑。另外还有上两种颜色的，通过用after和before两个伪类，来做。\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>CSS伪类实现文字三色</title>\n  <style>\n    body { margin: 0; padding: 0; padding-top: 200px; text-align: center;}\n    span {\n      font-size: 120px;\n      display: inline-block; /*需要这种布局*/\n      position: relative;\n      color:orangered ;\n    }\n    span:after,span:before {\n      display: block;\n      content:attr(data-content);\n      position: absolute;\n      top: 0;\n      left: 0;\n      overflow: hidden;\n    }\n    span:after {\n      height: 40%;\n      z-index: 3;\n      color:dodgerblue;\n    }\n    span:before {\n      height: 70%;\n      z-index: 2;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <span>美</span><span>丽</span><span>人</span><span>生</span>\n  <script src=\"http://www.jingjingke.com/res/js/jquery.min.js\"></script>\n  <script>\n    $('span').each(function(){\n      $(this).attr('data-content',$(this).text());\n    });\n  </script>\n</body>\n</html>\n```\n这是我整理的三种颜色了，跟文字颜色对半对比一下，差不多应该能理解了~\n\n","source":"_posts/css-text-half.md","raw":"---\ntitle: CSS伪类实现文字颜色对半\ndate: 2016-11-18 13:52:30\ncategories:\n- 前端笔记\ntags:\n- CSS\n---\nCSS不仅是一种技术，也是一种艺术，在这个领域中你有更大的空间和可能性来发挥自己的奇思妙想，今天用CSS给文字上一半的颜色，才发现CSS伪类真是无处不在。![CSS伪类实现文字颜色对半效果图](/public/img/1-16111QI32NT.png)CSS实现文字颜色对半，其实说到底还是将伪类显示一半，上色后放到原来的字上面，从正面看到的效果就是这个文字被分了两半，一半是上色后的，一半是原来的颜色。仔细看一下代码，感觉还是很容易理解的！\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>CSS伪类实现文字颜色对半</title>\n  <style>\n    body { margin: 0; padding: 0; padding-top: 200px; text-align: center;}\n    span {\n      font-size: 120px;\n      display: inline-block; /*需要这种布局*/\n      position: relative;\n    }\n    span:after {\n      display: block;\n      content:attr(data-content);\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 2;\n      color:dodgerblue;\n      width: 50%;\n      overflow: hidden;\n    }\n  </style>\n</head>\n<body>\n  <span>美</span><span>丽</span><span>人</span><span>生</span>\n  <script src=\"http://www.jingjingke.com/res/js/jquery.min.js\"></script>\n  <script>\n    $('span').each(function(){\n      $(this).attr('data-content',$(this).text());\n    });\n  </script>\n</body>\n</html>\n```\n这个是简化后的代码，[点击原文链接](http://www.webhek.com/css-half-character/)\n\n因为原文可能讲得比较多一些，我自己做的时候就能省则省了。兼容没怎么考虑。另外还有上两种颜色的，通过用after和before两个伪类，来做。\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>CSS伪类实现文字三色</title>\n  <style>\n    body { margin: 0; padding: 0; padding-top: 200px; text-align: center;}\n    span {\n      font-size: 120px;\n      display: inline-block; /*需要这种布局*/\n      position: relative;\n      color:orangered ;\n    }\n    span:after,span:before {\n      display: block;\n      content:attr(data-content);\n      position: absolute;\n      top: 0;\n      left: 0;\n      overflow: hidden;\n    }\n    span:after {\n      height: 40%;\n      z-index: 3;\n      color:dodgerblue;\n    }\n    span:before {\n      height: 70%;\n      z-index: 2;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <span>美</span><span>丽</span><span>人</span><span>生</span>\n  <script src=\"http://www.jingjingke.com/res/js/jquery.min.js\"></script>\n  <script>\n    $('span').each(function(){\n      $(this).attr('data-content',$(this).text());\n    });\n  </script>\n</body>\n</html>\n```\n这是我整理的三种颜色了，跟文字颜色对半对比一下，差不多应该能理解了~\n\n","slug":"css-text-half","published":1,"updated":"2017-05-23T06:23:49.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsvv0004xcv9se8936qr","content":"<p>CSS不仅是一种技术，也是一种艺术，在这个领域中你有更大的空间和可能性来发挥自己的奇思妙想，今天用CSS给文字上一半的颜色，才发现CSS伪类真是无处不在。<img src=\"/public/img/1-16111QI32NT.png\" alt=\"CSS伪类实现文字颜色对半效果图\">CSS实现文字颜色对半，其实说到底还是将伪类显示一半，上色后放到原来的字上面，从正面看到的效果就是这个文字被分了两半，一半是上色后的，一半是原来的颜色。仔细看一下代码，感觉还是很容易理解的！<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS伪类实现文字颜色对半<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding-top</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">text-align</span>: center;&#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">120px</span>;</div><div class=\"line\">      <span class=\"attribute\">display</span>: inline-block; <span class=\"comment\">/*需要这种布局*/</span></div><div class=\"line\">      <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">display</span>: block;</div><div class=\"line\">      <span class=\"attribute\">content</span>:<span class=\"built_in\">attr</span>(data-content);</div><div class=\"line\">      <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>:dodgerblue;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">      <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>美<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>丽<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>人<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>生<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.jingjingke.com/res/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"string\">'span'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'data-content'</span>,$(<span class=\"keyword\">this</span>).text());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个是简化后的代码，<a href=\"http://www.webhek.com/css-half-character/\" target=\"_blank\" rel=\"external\">点击原文链接</a></p>\n<p>因为原文可能讲得比较多一些，我自己做的时候就能省则省了。兼容没怎么考虑。另外还有上两种颜色的，通过用after和before两个伪类，来做。<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS伪类实现文字三色<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding-top</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">text-align</span>: center;&#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">120px</span>;</div><div class=\"line\">      <span class=\"attribute\">display</span>: inline-block; <span class=\"comment\">/*需要这种布局*/</span></div><div class=\"line\">      <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">      <span class=\"attribute\">color</span>:orangered ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:after</span>,<span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">display</span>: block;</div><div class=\"line\">      <span class=\"attribute\">content</span>:<span class=\"built_in\">attr</span>(data-content);</div><div class=\"line\">      <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">40%</span>;</div><div class=\"line\">      <span class=\"attribute\">z-index</span>: <span class=\"number\">3</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>:dodgerblue;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">70%</span>;</div><div class=\"line\">      <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: black;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>美<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>丽<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>人<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>生<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.jingjingke.com/res/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"string\">'span'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'data-content'</span>,$(<span class=\"keyword\">this</span>).text());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这是我整理的三种颜色了，跟文字颜色对半对比一下，差不多应该能理解了~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CSS不仅是一种技术，也是一种艺术，在这个领域中你有更大的空间和可能性来发挥自己的奇思妙想，今天用CSS给文字上一半的颜色，才发现CSS伪类真是无处不在。<img src=\"/public/img/1-16111QI32NT.png\" alt=\"CSS伪类实现文字颜色对半效果图\">CSS实现文字颜色对半，其实说到底还是将伪类显示一半，上色后放到原来的字上面，从正面看到的效果就是这个文字被分了两半，一半是上色后的，一半是原来的颜色。仔细看一下代码，感觉还是很容易理解的！<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS伪类实现文字颜色对半<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding-top</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">text-align</span>: center;&#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">120px</span>;</div><div class=\"line\">      <span class=\"attribute\">display</span>: inline-block; <span class=\"comment\">/*需要这种布局*/</span></div><div class=\"line\">      <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">display</span>: block;</div><div class=\"line\">      <span class=\"attribute\">content</span>:<span class=\"built_in\">attr</span>(data-content);</div><div class=\"line\">      <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>:dodgerblue;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">      <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>美<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>丽<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>人<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>生<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.jingjingke.com/res/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"string\">'span'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'data-content'</span>,$(<span class=\"keyword\">this</span>).text());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个是简化后的代码，<a href=\"http://www.webhek.com/css-half-character/\" target=\"_blank\" rel=\"external\">点击原文链接</a></p>\n<p>因为原文可能讲得比较多一些，我自己做的时候就能省则省了。兼容没怎么考虑。另外还有上两种颜色的，通过用after和before两个伪类，来做。<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS伪类实现文字三色<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding-top</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">text-align</span>: center;&#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">120px</span>;</div><div class=\"line\">      <span class=\"attribute\">display</span>: inline-block; <span class=\"comment\">/*需要这种布局*/</span></div><div class=\"line\">      <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">      <span class=\"attribute\">color</span>:orangered ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:after</span>,<span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">display</span>: block;</div><div class=\"line\">      <span class=\"attribute\">content</span>:<span class=\"built_in\">attr</span>(data-content);</div><div class=\"line\">      <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">40%</span>;</div><div class=\"line\">      <span class=\"attribute\">z-index</span>: <span class=\"number\">3</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>:dodgerblue;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">70%</span>;</div><div class=\"line\">      <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: black;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>美<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>丽<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>人<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>生<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.jingjingke.com/res/js/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"string\">'span'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'data-content'</span>,$(<span class=\"keyword\">this</span>).text());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这是我整理的三种颜色了，跟文字颜色对半对比一下，差不多应该能理解了~</p>\n"},{"title":"没有退出接口的页面实现退出功能流程图","date":"2017-03-21T07:34:11.000Z","_content":"登录退出功能一般是成对出现，但是项目中并不一定有退出的接口。这时就需要去模拟一个退出的操作，可以配合本地缓存/storage都可。下面是之前在ProcessOn上练习画的一个流程图，可能还不够完美，但是讲解一下思路，应该还是够了的。![没有退出接口的页面实现退出功能流程图效果](/public/img/1-1F3211101030-L.png)因为我的数据请求过程中需要用到appId和appSecret，所以在登录成功之后，将这一对数据存入缓存中，在接下来的过程中都是从缓存中拿appId和appSecret来使用。\n\n点击退出时，则将缓存中这一对数据清空，并去登录页面重新获取一对appId和appSecret。\n\n退出后若在其它功能页面访问其它数据接口，发送ajax后台在验证appId时，会发现这是一个无效的appId，同样会提示过期，然后重新登录。\n\n理一下思路：\n```pre\n1. 打开app,去登录页面\n2. 登录页面刷新一对appId和appSecret\n3. 填写登录表单提交时，将appId作为参数，并使用公钥进行加密\n4. 登录接口登录成功后将appId和Secret进行本地缓存\n5. 其它页面若请求数据则同理将appId作为参数，注意这时需使用appSecret加密\n6. 若请求成功，则使用appSecret进行解密成功\n7. 若请求不成功(appId过期失效等情况)，则提示过期并重新去登录页面\n8. 点击退出时，清空本地缓存的appId和appSecret，去登录页面\n```\n大致的流程就是这样~这个只是我个人的想法，您觉得不好的地方，欢迎轻拍。\n\n","source":"_posts/exit-the-login-flow-chart.md","raw":"---\ntitle: 没有退出接口的页面实现退出功能流程图\ndate: 2017-03-21 15:34:11\ncategories:\n- 前端笔记\ntags:\n- 逻辑\n---\n登录退出功能一般是成对出现，但是项目中并不一定有退出的接口。这时就需要去模拟一个退出的操作，可以配合本地缓存/storage都可。下面是之前在ProcessOn上练习画的一个流程图，可能还不够完美，但是讲解一下思路，应该还是够了的。![没有退出接口的页面实现退出功能流程图效果](/public/img/1-1F3211101030-L.png)因为我的数据请求过程中需要用到appId和appSecret，所以在登录成功之后，将这一对数据存入缓存中，在接下来的过程中都是从缓存中拿appId和appSecret来使用。\n\n点击退出时，则将缓存中这一对数据清空，并去登录页面重新获取一对appId和appSecret。\n\n退出后若在其它功能页面访问其它数据接口，发送ajax后台在验证appId时，会发现这是一个无效的appId，同样会提示过期，然后重新登录。\n\n理一下思路：\n```pre\n1. 打开app,去登录页面\n2. 登录页面刷新一对appId和appSecret\n3. 填写登录表单提交时，将appId作为参数，并使用公钥进行加密\n4. 登录接口登录成功后将appId和Secret进行本地缓存\n5. 其它页面若请求数据则同理将appId作为参数，注意这时需使用appSecret加密\n6. 若请求成功，则使用appSecret进行解密成功\n7. 若请求不成功(appId过期失效等情况)，则提示过期并重新去登录页面\n8. 点击退出时，清空本地缓存的appId和appSecret，去登录页面\n```\n大致的流程就是这样~这个只是我个人的想法，您觉得不好的地方，欢迎轻拍。\n\n","slug":"exit-the-login-flow-chart","published":1,"updated":"2017-05-23T06:23:41.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsvy0005xcv9nuzcb70z","content":"<p>登录退出功能一般是成对出现，但是项目中并不一定有退出的接口。这时就需要去模拟一个退出的操作，可以配合本地缓存/storage都可。下面是之前在ProcessOn上练习画的一个流程图，可能还不够完美，但是讲解一下思路，应该还是够了的。<img src=\"/public/img/1-1F3211101030-L.png\" alt=\"没有退出接口的页面实现退出功能流程图效果\">因为我的数据请求过程中需要用到appId和appSecret，所以在登录成功之后，将这一对数据存入缓存中，在接下来的过程中都是从缓存中拿appId和appSecret来使用。</p>\n<p>点击退出时，则将缓存中这一对数据清空，并去登录页面重新获取一对appId和appSecret。</p>\n<p>退出后若在其它功能页面访问其它数据接口，发送ajax后台在验证appId时，会发现这是一个无效的appId，同样会提示过期，然后重新登录。</p>\n<p>理一下思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 打开app,去登录页面</div><div class=\"line\">2. 登录页面刷新一对appId和appSecret</div><div class=\"line\">3. 填写登录表单提交时，将appId作为参数，并使用公钥进行加密</div><div class=\"line\">4. 登录接口登录成功后将appId和Secret进行本地缓存</div><div class=\"line\">5. 其它页面若请求数据则同理将appId作为参数，注意这时需使用appSecret加密</div><div class=\"line\">6. 若请求成功，则使用appSecret进行解密成功</div><div class=\"line\">7. 若请求不成功(appId过期失效等情况)，则提示过期并重新去登录页面</div><div class=\"line\">8. 点击退出时，清空本地缓存的appId和appSecret，去登录页面</div></pre></td></tr></table></figure></p>\n<p>大致的流程就是这样~这个只是我个人的想法，您觉得不好的地方，欢迎轻拍。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>登录退出功能一般是成对出现，但是项目中并不一定有退出的接口。这时就需要去模拟一个退出的操作，可以配合本地缓存/storage都可。下面是之前在ProcessOn上练习画的一个流程图，可能还不够完美，但是讲解一下思路，应该还是够了的。<img src=\"/public/img/1-1F3211101030-L.png\" alt=\"没有退出接口的页面实现退出功能流程图效果\">因为我的数据请求过程中需要用到appId和appSecret，所以在登录成功之后，将这一对数据存入缓存中，在接下来的过程中都是从缓存中拿appId和appSecret来使用。</p>\n<p>点击退出时，则将缓存中这一对数据清空，并去登录页面重新获取一对appId和appSecret。</p>\n<p>退出后若在其它功能页面访问其它数据接口，发送ajax后台在验证appId时，会发现这是一个无效的appId，同样会提示过期，然后重新登录。</p>\n<p>理一下思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 打开app,去登录页面</div><div class=\"line\">2. 登录页面刷新一对appId和appSecret</div><div class=\"line\">3. 填写登录表单提交时，将appId作为参数，并使用公钥进行加密</div><div class=\"line\">4. 登录接口登录成功后将appId和Secret进行本地缓存</div><div class=\"line\">5. 其它页面若请求数据则同理将appId作为参数，注意这时需使用appSecret加密</div><div class=\"line\">6. 若请求成功，则使用appSecret进行解密成功</div><div class=\"line\">7. 若请求不成功(appId过期失效等情况)，则提示过期并重新去登录页面</div><div class=\"line\">8. 点击退出时，清空本地缓存的appId和appSecret，去登录页面</div></pre></td></tr></table></figure></p>\n<p>大致的流程就是这样~这个只是我个人的想法，您觉得不好的地方，欢迎轻拍。</p>\n"},{"title":"JS转换金额之数字到中文的转化","date":"2016-10-13T07:09:50.000Z","_content":"之前项目中有个合同页面需要将数字金额转换成大写汉字，在百度上搜索到了一个关于Js实现将数字钱币与中文汉字转换的代码，感觉现在这东西金融网站上能用的地方还满多的，所以保存下~![JS转换金额之数字到中文的转化配图](/public/img/1-16101Q14014F0.png)\n\n应该说是非常容易理解的啦，只要调用digit_uppercase这个函数就可以了，返回值就是大写的钱币数额。\n\n具体代码如下：\n```pre\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>JS转换金额之数字到中文的转化</title>\n</head>\n<body>\n<script>\n//数字到中文的转化\nfunction digit_uppercase(n){\n  var fraction = ['角', '分'];\n  var digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖']; \n  var unit = [ ['', '万', '亿'], ['', '拾', '佰', '仟']  ];\n  var head = n < 0? '欠': ''; \n  n = Math.abs(n);\n  var s = ''; \n  for (var i = 0; i < fraction.length; i++){\n    s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');\n  }\n  n = Math.floor(n);\n  for (var i = 0; i < unit[0].length && n > 0; i++){\n    var p = ''; \n    for (var j = 0; j < unit[1].length && n > 0; j++){\n      p = digit[n % 10] + unit[1][j] + p;\n      n = Math.floor(n / 10);\n    }\n    s = p.replace(/(零.)*零$/, '').replace(/^$/, '零')  + unit[0][i] + s; \n  }\n  return head + s.replace(/(零.)*零元/, '').replace(/(零.)+/g, '零').replace(/^整$/, ''); \n}\n//测试\nconsole.log(digit_uppercase(123456));\n</script>\n</body>\n</html>\n```\n\n金融网站上面用的应该比较多，像我用的就是合同的地方将调用出的数字改为汉字大写的金额~\n\n\n","source":"_posts/js-amount-conversion-chinese.md","raw":"---\ntitle: JS转换金额之数字到中文的转化\ndate: 2016-10-13 15:09:50\ncategories:\n- 前端笔记\ntags:\n- JS\n---\n之前项目中有个合同页面需要将数字金额转换成大写汉字，在百度上搜索到了一个关于Js实现将数字钱币与中文汉字转换的代码，感觉现在这东西金融网站上能用的地方还满多的，所以保存下~![JS转换金额之数字到中文的转化配图](/public/img/1-16101Q14014F0.png)\n\n应该说是非常容易理解的啦，只要调用digit_uppercase这个函数就可以了，返回值就是大写的钱币数额。\n\n具体代码如下：\n```pre\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>JS转换金额之数字到中文的转化</title>\n</head>\n<body>\n<script>\n//数字到中文的转化\nfunction digit_uppercase(n){\n  var fraction = ['角', '分'];\n  var digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖']; \n  var unit = [ ['', '万', '亿'], ['', '拾', '佰', '仟']  ];\n  var head = n < 0? '欠': ''; \n  n = Math.abs(n);\n  var s = ''; \n  for (var i = 0; i < fraction.length; i++){\n    s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');\n  }\n  n = Math.floor(n);\n  for (var i = 0; i < unit[0].length && n > 0; i++){\n    var p = ''; \n    for (var j = 0; j < unit[1].length && n > 0; j++){\n      p = digit[n % 10] + unit[1][j] + p;\n      n = Math.floor(n / 10);\n    }\n    s = p.replace(/(零.)*零$/, '').replace(/^$/, '零')  + unit[0][i] + s; \n  }\n  return head + s.replace(/(零.)*零元/, '').replace(/(零.)+/g, '零').replace(/^整$/, ''); \n}\n//测试\nconsole.log(digit_uppercase(123456));\n</script>\n</body>\n</html>\n```\n\n金融网站上面用的应该比较多，像我用的就是合同的地方将调用出的数字改为汉字大写的金额~\n\n\n","slug":"js-amount-conversion-chinese","published":1,"updated":"2017-05-23T06:23:43.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsw10006xcv9rxhyxtum","content":"<p>之前项目中有个合同页面需要将数字金额转换成大写汉字，在百度上搜索到了一个关于Js实现将数字钱币与中文汉字转换的代码，感觉现在这东西金融网站上能用的地方还满多的，所以保存下~<img src=\"/public/img/1-16101Q14014F0.png\" alt=\"JS转换金额之数字到中文的转化配图\"></p>\n<p>应该说是非常容易理解的啦，只要调用digit_uppercase这个函数就可以了，返回值就是大写的钱币数额。</p>\n<p>具体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">&lt;title&gt;JS转换金额之数字到中文的转化&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">//数字到中文的转化</div><div class=\"line\">function digit_uppercase(n)&#123;</div><div class=\"line\">  var fraction = [&apos;角&apos;, &apos;分&apos;];</div><div class=\"line\">  var digit = [&apos;零&apos;, &apos;壹&apos;, &apos;贰&apos;, &apos;叁&apos;, &apos;肆&apos;, &apos;伍&apos;, &apos;陆&apos;, &apos;柒&apos;, &apos;捌&apos;, &apos;玖&apos;]; </div><div class=\"line\">  var unit = [ [&apos;&apos;, &apos;万&apos;, &apos;亿&apos;], [&apos;&apos;, &apos;拾&apos;, &apos;佰&apos;, &apos;仟&apos;]  ];</div><div class=\"line\">  var head = n &lt; 0? &apos;欠&apos;: &apos;&apos;; </div><div class=\"line\">  n = Math.abs(n);</div><div class=\"line\">  var s = &apos;&apos;; </div><div class=\"line\">  for (var i = 0; i &lt; fraction.length; i++)&#123;</div><div class=\"line\">    s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, &apos;&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  n = Math.floor(n);</div><div class=\"line\">  for (var i = 0; i &lt; unit[0].length &amp;&amp; n &gt; 0; i++)&#123;</div><div class=\"line\">    var p = &apos;&apos;; </div><div class=\"line\">    for (var j = 0; j &lt; unit[1].length &amp;&amp; n &gt; 0; j++)&#123;</div><div class=\"line\">      p = digit[n % 10] + unit[1][j] + p;</div><div class=\"line\">      n = Math.floor(n / 10);</div><div class=\"line\">    &#125;</div><div class=\"line\">    s = p.replace(/(零.)*零$/, &apos;&apos;).replace(/^$/, &apos;零&apos;)  + unit[0][i] + s; </div><div class=\"line\">  &#125;</div><div class=\"line\">  return head + s.replace(/(零.)*零元/, &apos;&apos;).replace(/(零.)+/g, &apos;零&apos;).replace(/^整$/, &apos;&apos;); </div><div class=\"line\">&#125;</div><div class=\"line\">//测试</div><div class=\"line\">console.log(digit_uppercase(123456));</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>金融网站上面用的应该比较多，像我用的就是合同的地方将调用出的数字改为汉字大写的金额~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前项目中有个合同页面需要将数字金额转换成大写汉字，在百度上搜索到了一个关于Js实现将数字钱币与中文汉字转换的代码，感觉现在这东西金融网站上能用的地方还满多的，所以保存下~<img src=\"/public/img/1-16101Q14014F0.png\" alt=\"JS转换金额之数字到中文的转化配图\"></p>\n<p>应该说是非常容易理解的啦，只要调用digit_uppercase这个函数就可以了，返回值就是大写的钱币数额。</p>\n<p>具体代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!doctype html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">&lt;title&gt;JS转换金额之数字到中文的转化&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">//数字到中文的转化</div><div class=\"line\">function digit_uppercase(n)&#123;</div><div class=\"line\">  var fraction = [&apos;角&apos;, &apos;分&apos;];</div><div class=\"line\">  var digit = [&apos;零&apos;, &apos;壹&apos;, &apos;贰&apos;, &apos;叁&apos;, &apos;肆&apos;, &apos;伍&apos;, &apos;陆&apos;, &apos;柒&apos;, &apos;捌&apos;, &apos;玖&apos;]; </div><div class=\"line\">  var unit = [ [&apos;&apos;, &apos;万&apos;, &apos;亿&apos;], [&apos;&apos;, &apos;拾&apos;, &apos;佰&apos;, &apos;仟&apos;]  ];</div><div class=\"line\">  var head = n &lt; 0? &apos;欠&apos;: &apos;&apos;; </div><div class=\"line\">  n = Math.abs(n);</div><div class=\"line\">  var s = &apos;&apos;; </div><div class=\"line\">  for (var i = 0; i &lt; fraction.length; i++)&#123;</div><div class=\"line\">    s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, &apos;&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  n = Math.floor(n);</div><div class=\"line\">  for (var i = 0; i &lt; unit[0].length &amp;&amp; n &gt; 0; i++)&#123;</div><div class=\"line\">    var p = &apos;&apos;; </div><div class=\"line\">    for (var j = 0; j &lt; unit[1].length &amp;&amp; n &gt; 0; j++)&#123;</div><div class=\"line\">      p = digit[n % 10] + unit[1][j] + p;</div><div class=\"line\">      n = Math.floor(n / 10);</div><div class=\"line\">    &#125;</div><div class=\"line\">    s = p.replace(/(零.)*零$/, &apos;&apos;).replace(/^$/, &apos;零&apos;)  + unit[0][i] + s; </div><div class=\"line\">  &#125;</div><div class=\"line\">  return head + s.replace(/(零.)*零元/, &apos;&apos;).replace(/(零.)+/g, &apos;零&apos;).replace(/^整$/, &apos;&apos;); </div><div class=\"line\">&#125;</div><div class=\"line\">//测试</div><div class=\"line\">console.log(digit_uppercase(123456));</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>金融网站上面用的应该比较多，像我用的就是合同的地方将调用出的数字改为汉字大写的金额~</p>\n"},{"title":"json数组转树型嵌套结构","date":"2017-05-03T08:02:51.000Z","_content":"看到有小伙伴想将json数组按照level来分类转成树型嵌套的结构，正好有空，所以我也动手做了做，还好没让人失望。![json数组转树型嵌套结构效果图](/public/img/1-1F5031625400-L.gif)看效果图其实不难发现，原始数据由普通的结构转到树型嵌套结构，经过了两步。\n```pre\n1. 按照等级分成一堆一堆。\n2. 从下向上（排除顶级），查到它们所在的父节点，而将顶级组合在一起就是一个全新的树了。\n```\n实现的代码具体如下：\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>json数组转树型嵌套结构</title>\n  </head>\n  <body>\n    <script>\n      //原始数据，根据level分5位数代表1级，10位数代表2级，以此类推\n      var dataJson = [\n        {\"name\":\"*a\",\"id\":\"1\",\"level\":\"00001\"},\n        {\"name\":\"**a\",\"id\":\"1\",\"level\":\"0000100035\"},\n        {\"name\":\"**a\",\"id\":\"1\",\"level\":\"0000100036\"},\n        {\"name\":\"***a\",\"id\":\"1\",\"level\":\"000010003500020\"},\n        {\"name\":\"***a\",\"id\":\"1\",\"level\":\"000010003500021\"},\n        {\"name\":\"***a\",\"id\":\"1\",\"level\":\"000010003500022\"},\n        {\"name\":\"*c\",\"id\":\"1\",\"level\":\"00003\"},\n        {\"name\":\"**c\",\"id\":\"1\",\"level\":\"0000300037\"},\n        {\"name\":\"****a\",\"id\":\"1\",\"level\":\"00001000350002100001\"},\n        {\"name\":\"*b\",\"id\":\"1\",\"level\":\"00002\"}\n      ];\n      \n      //先按等级分类(同时整理原始json)\n      var myArr = [] , newJson = [];\n      for(var i = 0; i < dataJson.length; i++) {\n        //将dataJson的索引按照等级分入myArr\n        var thisIndex = dataJson[i].level.length / 5 - 1;\n        if(myArr[thisIndex] === undefined) {\n          myArr[thisIndex] = []\n        }\n        myArr[thisIndex].push(i)\n        //重整对象属性(只保留name和level)\n        var newObj={\n          name  :dataJson[i].name,\n          level  :dataJson[i].level\n        }\n        newJson.push(newObj)\n      }\n \n      //组成梯形\n      var ladderArr = [];\n      for(var i = myArr.length - 1; i >= 0; i--) {\n        switch(i) {\n          case 0:\n            for(var l = 0; l < myArr[i].length; l++) {\n              ladderArr.push(newJson[myArr[i][l]])\n            }\n            break;\n          default:\n            for(var j = 0; j < myArr[i].length; j++) {\n              var str = dataJson[myArr[i][j]].level.substr(0, i * 5);\n              for(var k = 0; k < myArr[i - 1].length; k++) {\n                if(dataJson[myArr[i - 1][k]].level === str) {\n                  if(newJson[myArr[i - 1][k]].list === undefined) newJson[myArr[i - 1][k]].list = [];\n                  newJson[myArr[i - 1][k]].list.push(newJson[myArr[i][j]])\n                }\n              }\n            }\n        }\n      }\n      \n      //打印结果\n      console.log(ladderArr)\n      console.log(JSON.stringify(ladderArr))\n \n    </script>\n  </body>\n</html>\n```\n需要注意：\n- 在等级分类时有新建“newJson”，这并不是必须的，而是为了排除掉level字段而新增的。\n- 后面打印的结果，可以展开ladderArr对象，或者直接阅读对象字符串，已经能够发现这就是一颗树了\n\n总之写完这个demo，尤其是在第二步中使用从后向前循环法并配合switch，感觉有受益，这也是一个好用的练手代码~","source":"_posts/json-array-tree-nested.md","raw":"---\ntitle: json数组转树型嵌套结构\ndate: 2017-05-03 16:02:51\ncategories:\n- 前端笔记\ntags:\n- JS\n---\n看到有小伙伴想将json数组按照level来分类转成树型嵌套的结构，正好有空，所以我也动手做了做，还好没让人失望。![json数组转树型嵌套结构效果图](/public/img/1-1F5031625400-L.gif)看效果图其实不难发现，原始数据由普通的结构转到树型嵌套结构，经过了两步。\n```pre\n1. 按照等级分成一堆一堆。\n2. 从下向上（排除顶级），查到它们所在的父节点，而将顶级组合在一起就是一个全新的树了。\n```\n实现的代码具体如下：\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>json数组转树型嵌套结构</title>\n  </head>\n  <body>\n    <script>\n      //原始数据，根据level分5位数代表1级，10位数代表2级，以此类推\n      var dataJson = [\n        {\"name\":\"*a\",\"id\":\"1\",\"level\":\"00001\"},\n        {\"name\":\"**a\",\"id\":\"1\",\"level\":\"0000100035\"},\n        {\"name\":\"**a\",\"id\":\"1\",\"level\":\"0000100036\"},\n        {\"name\":\"***a\",\"id\":\"1\",\"level\":\"000010003500020\"},\n        {\"name\":\"***a\",\"id\":\"1\",\"level\":\"000010003500021\"},\n        {\"name\":\"***a\",\"id\":\"1\",\"level\":\"000010003500022\"},\n        {\"name\":\"*c\",\"id\":\"1\",\"level\":\"00003\"},\n        {\"name\":\"**c\",\"id\":\"1\",\"level\":\"0000300037\"},\n        {\"name\":\"****a\",\"id\":\"1\",\"level\":\"00001000350002100001\"},\n        {\"name\":\"*b\",\"id\":\"1\",\"level\":\"00002\"}\n      ];\n      \n      //先按等级分类(同时整理原始json)\n      var myArr = [] , newJson = [];\n      for(var i = 0; i < dataJson.length; i++) {\n        //将dataJson的索引按照等级分入myArr\n        var thisIndex = dataJson[i].level.length / 5 - 1;\n        if(myArr[thisIndex] === undefined) {\n          myArr[thisIndex] = []\n        }\n        myArr[thisIndex].push(i)\n        //重整对象属性(只保留name和level)\n        var newObj={\n          name  :dataJson[i].name,\n          level  :dataJson[i].level\n        }\n        newJson.push(newObj)\n      }\n \n      //组成梯形\n      var ladderArr = [];\n      for(var i = myArr.length - 1; i >= 0; i--) {\n        switch(i) {\n          case 0:\n            for(var l = 0; l < myArr[i].length; l++) {\n              ladderArr.push(newJson[myArr[i][l]])\n            }\n            break;\n          default:\n            for(var j = 0; j < myArr[i].length; j++) {\n              var str = dataJson[myArr[i][j]].level.substr(0, i * 5);\n              for(var k = 0; k < myArr[i - 1].length; k++) {\n                if(dataJson[myArr[i - 1][k]].level === str) {\n                  if(newJson[myArr[i - 1][k]].list === undefined) newJson[myArr[i - 1][k]].list = [];\n                  newJson[myArr[i - 1][k]].list.push(newJson[myArr[i][j]])\n                }\n              }\n            }\n        }\n      }\n      \n      //打印结果\n      console.log(ladderArr)\n      console.log(JSON.stringify(ladderArr))\n \n    </script>\n  </body>\n</html>\n```\n需要注意：\n- 在等级分类时有新建“newJson”，这并不是必须的，而是为了排除掉level字段而新增的。\n- 后面打印的结果，可以展开ladderArr对象，或者直接阅读对象字符串，已经能够发现这就是一颗树了\n\n总之写完这个demo，尤其是在第二步中使用从后向前循环法并配合switch，感觉有受益，这也是一个好用的练手代码~","slug":"json-array-tree-nested","published":1,"updated":"2017-05-23T06:23:46.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsw3000axcv95toxz04u","content":"<p>看到有小伙伴想将json数组按照level来分类转成树型嵌套的结构，正好有空，所以我也动手做了做，还好没让人失望。<img src=\"/public/img/1-1F5031625400-L.gif\" alt=\"json数组转树型嵌套结构效果图\">看效果图其实不难发现，原始数据由普通的结构转到树型嵌套结构，经过了两步。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 按照等级分成一堆一堆。</div><div class=\"line\">2. 从下向上（排除顶级），查到它们所在的父节点，而将顶级组合在一起就是一个全新的树了。</div></pre></td></tr></table></figure></p>\n<p>实现的代码具体如下：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>json数组转树型嵌套结构<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      <span class=\"comment\">//原始数据，根据level分5位数代表1级，10位数代表2级，以此类推</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dataJson = [</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"*a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00001\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"**a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"0000100035\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"**a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"0000100036\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"***a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"000010003500020\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"***a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"000010003500021\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"***a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"000010003500022\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"*c\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00003\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"**c\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"0000300037\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"****a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00001000350002100001\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"*b\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00002\"</span>&#125;</div><div class=\"line\">      ];</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//先按等级分类(同时整理原始json)</span></div><div class=\"line\">      <span class=\"keyword\">var</span> myArr = [] , newJson = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dataJson.length; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//将dataJson的索引按照等级分入myArr</span></div><div class=\"line\">        <span class=\"keyword\">var</span> thisIndex = dataJson[i].level.length / <span class=\"number\">5</span> - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(myArr[thisIndex] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">          myArr[thisIndex] = []</div><div class=\"line\">        &#125;</div><div class=\"line\">        myArr[thisIndex].push(i)</div><div class=\"line\">        <span class=\"comment\">//重整对象属性(只保留name和level)</span></div><div class=\"line\">        <span class=\"keyword\">var</span> newObj=&#123;</div><div class=\"line\">          <span class=\"attr\">name</span>  :dataJson[i].name,</div><div class=\"line\">          <span class=\"attr\">level</span>  :dataJson[i].level</div><div class=\"line\">        &#125;</div><div class=\"line\">        newJson.push(newObj)</div><div class=\"line\">      &#125;</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//组成梯形</span></div><div class=\"line\">      <span class=\"keyword\">var</span> ladderArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = myArr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span>(i) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> l = <span class=\"number\">0</span>; l &lt; myArr[i].length; l++) &#123;</div><div class=\"line\">              ladderArr.push(newJson[myArr[i][l]])</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; myArr[i].length; j++) &#123;</div><div class=\"line\">              <span class=\"keyword\">var</span> str = dataJson[myArr[i][j]].level.substr(<span class=\"number\">0</span>, i * <span class=\"number\">5</span>);</div><div class=\"line\">              <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; myArr[i - <span class=\"number\">1</span>].length; k++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(dataJson[myArr[i - <span class=\"number\">1</span>][k]].level === str) &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span>(newJson[myArr[i - <span class=\"number\">1</span>][k]].list === <span class=\"literal\">undefined</span>) newJson[myArr[i - <span class=\"number\">1</span>][k]].list = [];</div><div class=\"line\">                  newJson[myArr[i - <span class=\"number\">1</span>][k]].list.push(newJson[myArr[i][j]])</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//打印结果</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(ladderArr)</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(ladderArr))</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>需要注意：</p>\n<ul>\n<li>在等级分类时有新建“newJson”，这并不是必须的，而是为了排除掉level字段而新增的。</li>\n<li>后面打印的结果，可以展开ladderArr对象，或者直接阅读对象字符串，已经能够发现这就是一颗树了</li>\n</ul>\n<p>总之写完这个demo，尤其是在第二步中使用从后向前循环法并配合switch，感觉有受益，这也是一个好用的练手代码~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看到有小伙伴想将json数组按照level来分类转成树型嵌套的结构，正好有空，所以我也动手做了做，还好没让人失望。<img src=\"/public/img/1-1F5031625400-L.gif\" alt=\"json数组转树型嵌套结构效果图\">看效果图其实不难发现，原始数据由普通的结构转到树型嵌套结构，经过了两步。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 按照等级分成一堆一堆。</div><div class=\"line\">2. 从下向上（排除顶级），查到它们所在的父节点，而将顶级组合在一起就是一个全新的树了。</div></pre></td></tr></table></figure></p>\n<p>实现的代码具体如下：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>json数组转树型嵌套结构<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      <span class=\"comment\">//原始数据，根据level分5位数代表1级，10位数代表2级，以此类推</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dataJson = [</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"*a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00001\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"**a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"0000100035\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"**a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"0000100036\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"***a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"000010003500020\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"***a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"000010003500021\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"***a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"000010003500022\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"*c\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00003\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"**c\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"0000300037\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"****a\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00001000350002100001\"</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"*b\"</span>,<span class=\"string\">\"id\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"level\"</span>:<span class=\"string\">\"00002\"</span>&#125;</div><div class=\"line\">      ];</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//先按等级分类(同时整理原始json)</span></div><div class=\"line\">      <span class=\"keyword\">var</span> myArr = [] , newJson = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dataJson.length; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//将dataJson的索引按照等级分入myArr</span></div><div class=\"line\">        <span class=\"keyword\">var</span> thisIndex = dataJson[i].level.length / <span class=\"number\">5</span> - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(myArr[thisIndex] === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">          myArr[thisIndex] = []</div><div class=\"line\">        &#125;</div><div class=\"line\">        myArr[thisIndex].push(i)</div><div class=\"line\">        <span class=\"comment\">//重整对象属性(只保留name和level)</span></div><div class=\"line\">        <span class=\"keyword\">var</span> newObj=&#123;</div><div class=\"line\">          <span class=\"attr\">name</span>  :dataJson[i].name,</div><div class=\"line\">          <span class=\"attr\">level</span>  :dataJson[i].level</div><div class=\"line\">        &#125;</div><div class=\"line\">        newJson.push(newObj)</div><div class=\"line\">      &#125;</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">//组成梯形</span></div><div class=\"line\">      <span class=\"keyword\">var</span> ladderArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = myArr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span>(i) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> l = <span class=\"number\">0</span>; l &lt; myArr[i].length; l++) &#123;</div><div class=\"line\">              ladderArr.push(newJson[myArr[i][l]])</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; myArr[i].length; j++) &#123;</div><div class=\"line\">              <span class=\"keyword\">var</span> str = dataJson[myArr[i][j]].level.substr(<span class=\"number\">0</span>, i * <span class=\"number\">5</span>);</div><div class=\"line\">              <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; myArr[i - <span class=\"number\">1</span>].length; k++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(dataJson[myArr[i - <span class=\"number\">1</span>][k]].level === str) &#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span>(newJson[myArr[i - <span class=\"number\">1</span>][k]].list === <span class=\"literal\">undefined</span>) newJson[myArr[i - <span class=\"number\">1</span>][k]].list = [];</div><div class=\"line\">                  newJson[myArr[i - <span class=\"number\">1</span>][k]].list.push(newJson[myArr[i][j]])</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//打印结果</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(ladderArr)</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(ladderArr))</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>需要注意：</p>\n<ul>\n<li>在等级分类时有新建“newJson”，这并不是必须的，而是为了排除掉level字段而新增的。</li>\n<li>后面打印的结果，可以展开ladderArr对象，或者直接阅读对象字符串，已经能够发现这就是一颗树了</li>\n</ul>\n<p>总之写完这个demo，尤其是在第二步中使用从后向前循环法并配合switch，感觉有受益，这也是一个好用的练手代码~</p>\n"},{"title":"如何更方便的管理vue全局组件","date":"2017-03-06T07:28:32.000Z","_content":"刚开始我们会在入口文件main.js中注册VUE全局组件，但是多人合作时频繁修改入口文件的话可能会造成代码冲突，不利于代码维护。所以我们需要单独去建一个JS去保存组件并注册到全局。\n## 原来 ##\n在入口文件main.js/app.js中，这样注册全局组件：\n```js\n//获取位置\nimport topCom from \"./components/top\";\n//注册到全局\nVue.component('topCom', topCom);\n```\n## 现在 ##\n我们可以直接在components文件夹下，新建一个index.js，然后为它添加内容：\n```js\n//获取位置\nimport topCom from \"./top\";\nimport footCom from \"./foot\";\n//模块化\nexport default {\n    topCom,\n    footCom\n｝\n```\n以后components下如果有新增的全局注册可以只修改这个index.js就可以了。同时别忘记最一步，去全局注册一下(main.js/app.js)：\n\n```js\n//通过components下的index.js文件导入组件\nimport components from './components/';\n//对导入的组件进行全局组件注册\nObject.keys(components).forEach((key)=>{\n    Vue.component(key,components[key])\n})\n```\n这样以后就可以方便的去全局组件进行管理了。而在所有页面中，我们可以使用全局组件topCom和footCom，无须再去分别注册了~","source":"_posts/manage-vue-global-components.md","raw":"---\ntitle: 如何更方便的管理vue全局组件\ndate: 2017-03-06 15:28:32\ncategories:\n- 前端笔记\ntags:\n- VUE\n---\n刚开始我们会在入口文件main.js中注册VUE全局组件，但是多人合作时频繁修改入口文件的话可能会造成代码冲突，不利于代码维护。所以我们需要单独去建一个JS去保存组件并注册到全局。\n## 原来 ##\n在入口文件main.js/app.js中，这样注册全局组件：\n```js\n//获取位置\nimport topCom from \"./components/top\";\n//注册到全局\nVue.component('topCom', topCom);\n```\n## 现在 ##\n我们可以直接在components文件夹下，新建一个index.js，然后为它添加内容：\n```js\n//获取位置\nimport topCom from \"./top\";\nimport footCom from \"./foot\";\n//模块化\nexport default {\n    topCom,\n    footCom\n｝\n```\n以后components下如果有新增的全局注册可以只修改这个index.js就可以了。同时别忘记最一步，去全局注册一下(main.js/app.js)：\n\n```js\n//通过components下的index.js文件导入组件\nimport components from './components/';\n//对导入的组件进行全局组件注册\nObject.keys(components).forEach((key)=>{\n    Vue.component(key,components[key])\n})\n```\n这样以后就可以方便的去全局组件进行管理了。而在所有页面中，我们可以使用全局组件topCom和footCom，无须再去分别注册了~","slug":"manage-vue-global-components","published":1,"updated":"2017-05-22T07:32:05.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hsw8000dxcv98ir399ec","content":"<p>刚开始我们会在入口文件main.js中注册VUE全局组件，但是多人合作时频繁修改入口文件的话可能会造成代码冲突，不利于代码维护。所以我们需要单独去建一个JS去保存组件并注册到全局。</p>\n<h2 id=\"原来\"><a href=\"#原来\" class=\"headerlink\" title=\"原来\"></a>原来</h2><p>在入口文件main.js/app.js中，这样注册全局组件：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取位置</span></div><div class=\"line\"><span class=\"keyword\">import</span> topCom <span class=\"keyword\">from</span> <span class=\"string\">\"./components/top\"</span>;</div><div class=\"line\"><span class=\"comment\">//注册到全局</span></div><div class=\"line\">Vue.component(<span class=\"string\">'topCom'</span>, topCom);</div></pre></td></tr></table></figure></p>\n<h2 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h2><p>我们可以直接在components文件夹下，新建一个index.js，然后为它添加内容：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取位置</span></div><div class=\"line\"><span class=\"keyword\">import</span> topCom <span class=\"keyword\">from</span> <span class=\"string\">\"./top\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> footCom <span class=\"keyword\">from</span> <span class=\"string\">\"./foot\"</span>;</div><div class=\"line\"><span class=\"comment\">//模块化</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    topCom,</div><div class=\"line\">    footCom</div><div class=\"line\">｝</div></pre></td></tr></table></figure></p>\n<p>以后components下如果有新增的全局注册可以只修改这个index.js就可以了。同时别忘记最一步，去全局注册一下(main.js/app.js)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过components下的index.js文件导入组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> components <span class=\"keyword\">from</span> <span class=\"string\">'./components/'</span>;</div><div class=\"line\"><span class=\"comment\">//对导入的组件进行全局组件注册</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(components).forEach(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span>&#123;</div><div class=\"line\">    Vue.component(key,components[key])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样以后就可以方便的去全局组件进行管理了。而在所有页面中，我们可以使用全局组件topCom和footCom，无须再去分别注册了~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚开始我们会在入口文件main.js中注册VUE全局组件，但是多人合作时频繁修改入口文件的话可能会造成代码冲突，不利于代码维护。所以我们需要单独去建一个JS去保存组件并注册到全局。</p>\n<h2 id=\"原来\"><a href=\"#原来\" class=\"headerlink\" title=\"原来\"></a>原来</h2><p>在入口文件main.js/app.js中，这样注册全局组件：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取位置</span></div><div class=\"line\"><span class=\"keyword\">import</span> topCom <span class=\"keyword\">from</span> <span class=\"string\">\"./components/top\"</span>;</div><div class=\"line\"><span class=\"comment\">//注册到全局</span></div><div class=\"line\">Vue.component(<span class=\"string\">'topCom'</span>, topCom);</div></pre></td></tr></table></figure></p>\n<h2 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h2><p>我们可以直接在components文件夹下，新建一个index.js，然后为它添加内容：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取位置</span></div><div class=\"line\"><span class=\"keyword\">import</span> topCom <span class=\"keyword\">from</span> <span class=\"string\">\"./top\"</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> footCom <span class=\"keyword\">from</span> <span class=\"string\">\"./foot\"</span>;</div><div class=\"line\"><span class=\"comment\">//模块化</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    topCom,</div><div class=\"line\">    footCom</div><div class=\"line\">｝</div></pre></td></tr></table></figure></p>\n<p>以后components下如果有新增的全局注册可以只修改这个index.js就可以了。同时别忘记最一步，去全局注册一下(main.js/app.js)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通过components下的index.js文件导入组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> components <span class=\"keyword\">from</span> <span class=\"string\">'./components/'</span>;</div><div class=\"line\"><span class=\"comment\">//对导入的组件进行全局组件注册</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(components).forEach(<span class=\"function\">(<span class=\"params\">key</span>)=&gt;</span>&#123;</div><div class=\"line\">    Vue.component(key,components[key])</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样以后就可以方便的去全局组件进行管理了。而在所有页面中，我们可以使用全局组件topCom和footCom，无须再去分别注册了~</p>\n"},{"title":"PS设置时间轴面板快捷键","date":"2016-03-23T07:03:14.000Z","_content":"利用PS制作gif动画，需要用到窗口中一个比较重要的面板：时间轴（制作ps动画面板）。而默认的PS中，面板只有个别几个拥有快捷键，如何为时间轴面板设置一下快捷键呢？\n\n其实很简单，通过`alt + shift + ctrl + K`组合快捷键，打开键盘快捷键和菜单面板。![PS设置时间轴面板快捷键打开菜单面板效果](/public/img/1-160323111924548.png)\n\n选择应用程序菜单--窗口--找到时间轴点击快捷键那一栏，按F9（按键决定你想要使用哪个快捷键打开时间轴）然后点接受--点击确定就设置完成了\n\n现在你再打开菜单栏中的窗口，能看到时间轴面板后面有一个F9数字，以后每次需要使用时间轴时只需要按一下F9就能打开面板，是不是超级方便的~\n\n注意：时间轴PS快捷键并不一定是要设置成F9，选择一个自己顺手的快捷键才是“键盘快捷键和菜单面板”的根本。\n\n","source":"_posts/ps-set-shortcuts.md","raw":"---\ntitle: PS设置时间轴面板快捷键\ndate: 2016-03-23 15:03:14\ncategories:\n- 前端笔记\ntags:\n- PS\n---\n利用PS制作gif动画，需要用到窗口中一个比较重要的面板：时间轴（制作ps动画面板）。而默认的PS中，面板只有个别几个拥有快捷键，如何为时间轴面板设置一下快捷键呢？\n\n其实很简单，通过`alt + shift + ctrl + K`组合快捷键，打开键盘快捷键和菜单面板。![PS设置时间轴面板快捷键打开菜单面板效果](/public/img/1-160323111924548.png)\n\n选择应用程序菜单--窗口--找到时间轴点击快捷键那一栏，按F9（按键决定你想要使用哪个快捷键打开时间轴）然后点接受--点击确定就设置完成了\n\n现在你再打开菜单栏中的窗口，能看到时间轴面板后面有一个F9数字，以后每次需要使用时间轴时只需要按一下F9就能打开面板，是不是超级方便的~\n\n注意：时间轴PS快捷键并不一定是要设置成F9，选择一个自己顺手的快捷键才是“键盘快捷键和菜单面板”的根本。\n\n","slug":"ps-set-shortcuts","published":1,"updated":"2017-05-23T06:18:39.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hswd000ixcv9keqss5tg","content":"<p>利用PS制作gif动画，需要用到窗口中一个比较重要的面板：时间轴（制作ps动画面板）。而默认的PS中，面板只有个别几个拥有快捷键，如何为时间轴面板设置一下快捷键呢？</p>\n<p>其实很简单，通过<code>alt + shift + ctrl + K</code>组合快捷键，打开键盘快捷键和菜单面板。<img src=\"/public/img/1-160323111924548.png\" alt=\"PS设置时间轴面板快捷键打开菜单面板效果\"></p>\n<p>选择应用程序菜单–窗口–找到时间轴点击快捷键那一栏，按F9（按键决定你想要使用哪个快捷键打开时间轴）然后点接受–点击确定就设置完成了</p>\n<p>现在你再打开菜单栏中的窗口，能看到时间轴面板后面有一个F9数字，以后每次需要使用时间轴时只需要按一下F9就能打开面板，是不是超级方便的~</p>\n<p>注意：时间轴PS快捷键并不一定是要设置成F9，选择一个自己顺手的快捷键才是“键盘快捷键和菜单面板”的根本。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>利用PS制作gif动画，需要用到窗口中一个比较重要的面板：时间轴（制作ps动画面板）。而默认的PS中，面板只有个别几个拥有快捷键，如何为时间轴面板设置一下快捷键呢？</p>\n<p>其实很简单，通过<code>alt + shift + ctrl + K</code>组合快捷键，打开键盘快捷键和菜单面板。<img src=\"/public/img/1-160323111924548.png\" alt=\"PS设置时间轴面板快捷键打开菜单面板效果\"></p>\n<p>选择应用程序菜单–窗口–找到时间轴点击快捷键那一栏，按F9（按键决定你想要使用哪个快捷键打开时间轴）然后点接受–点击确定就设置完成了</p>\n<p>现在你再打开菜单栏中的窗口，能看到时间轴面板后面有一个F9数字，以后每次需要使用时间轴时只需要按一下F9就能打开面板，是不是超级方便的~</p>\n<p>注意：时间轴PS快捷键并不一定是要设置成F9，选择一个自己顺手的快捷键才是“键盘快捷键和菜单面板”的根本。</p>\n"},{"title":"background-position百分比格子速记法","date":"2016-08-30T07:45:13.000Z","_content":"其实最近在做的APP项目中已经在开始重整代码，大部分图标也都打算使用iconfont里面的字体图标来完成，不过前期的页面还在更新当中，一时没办法放弃这种背景图片background-position百分比的方法，在做尝试的时候发现了这种格式速记的方法，比较省事的样子~\n\n## 满足条件的格子有哪些？ ##\nbackground-position百分比格子，首先满足条件的格子有**1格，2格，3格，4格，5格，6格，9格，11格，21格**，而这些格子可以横纵自己组合，目前我使用的是6*6的格子（我自己沉得这种格子满适用的），而11格和21格还没有用到只是类推出的结果，不过应该也大差不差~\n### 一维格子百分比计算 ###\n1格比容简单这里就不说了，先从**2x1的格子**来说吧，假设图片默认里面是横排可以放两个图标（横向尺寸对半分），即2格，首先background-position竖向的值即可以写0%也可以写100%，而横向则有区别，第一个图标应是0%，第二个图标应是100%。这时的background-size值是200%，而你实际需要的尺寸则跟百分比是没有关系的。再说**5x1的格子**，即横向平分了5份，从左向右只说position百分比为：0%、25%、50%、75%、100%这五个值。background-size的值为500%;\n\n如果不明白的话不要捉急，后面我会画个图说明一下~\n\n### 二维格子百分比计算 ###\n再来说3*2这种格子，假设图片横向平分3竖向平分2，即这张图可以存6个小标，这时background-size值是300%，而从左向右从上至下，background-position的值则为：0% 0%、50% 0%、100% 0%、100% 0%、100% 50%、100% 100%，现在有没有发现什么规律呢？\n\n开始上图了：![background-position百分比格子速记法效果图1](/public/img/1-160S01A420530.png)因为background-size的值的计算是实际展示区域的尺寸是没有关系，只跟这个格子与格子总长有关，所以这个值可以说一目了然，上图也有列出来，比如8格的，size的值就是800%。\n\n而且图中也有另外贴出每个格子相差的值，我自己感觉这个就是百分比格子计算的根本。\n\n### 异变 ###\n当然实际应用中可能会出现较特殊情况，例如本来规划的图标就是100像素x100像素，但是突然有个效果图中图标尺寸需要的是160x160，在不影响之前写好的代码和图标的情况下，有两种方法可以解决：\n```pre\n1. 图片整体放大1.6倍\n2. 尝试让这个图标占两格或多格(推荐)\n```\n方法1是最省事的，无需怎么计算，直接放大背景图将160px存放在单元格，但是不好的地方就是图片放大后占用的体积也会变大，反而不美。而方法2则需要用到下面说的较复杂（合并多格）的情况，但是在前期说的那些格子中并不是所有的格子都能满足条件，目前可以使用2格、4格、6格、9格、21格，继续看下面这张图吧~![background-position百分比格子速记法效果图2](/public/img/1-160S01A340309.png)写到这里就差不多了~不过我自己思考的可能会有一些缺陷没有发现的地方，欢迎童鞋讨论与指正~\n\n\n\n\n\n","source":"_posts/background-position-percentage.md","raw":"---\ntitle: background-position百分比格子速记法\ndate: 2016-08-30 15:45:13\ncategories:\n- 前端笔记\ntags:\n- CSS\n---\n其实最近在做的APP项目中已经在开始重整代码，大部分图标也都打算使用iconfont里面的字体图标来完成，不过前期的页面还在更新当中，一时没办法放弃这种背景图片background-position百分比的方法，在做尝试的时候发现了这种格式速记的方法，比较省事的样子~\n\n## 满足条件的格子有哪些？ ##\nbackground-position百分比格子，首先满足条件的格子有**1格，2格，3格，4格，5格，6格，9格，11格，21格**，而这些格子可以横纵自己组合，目前我使用的是6*6的格子（我自己沉得这种格子满适用的），而11格和21格还没有用到只是类推出的结果，不过应该也大差不差~\n### 一维格子百分比计算 ###\n1格比容简单这里就不说了，先从**2x1的格子**来说吧，假设图片默认里面是横排可以放两个图标（横向尺寸对半分），即2格，首先background-position竖向的值即可以写0%也可以写100%，而横向则有区别，第一个图标应是0%，第二个图标应是100%。这时的background-size值是200%，而你实际需要的尺寸则跟百分比是没有关系的。再说**5x1的格子**，即横向平分了5份，从左向右只说position百分比为：0%、25%、50%、75%、100%这五个值。background-size的值为500%;\n\n如果不明白的话不要捉急，后面我会画个图说明一下~\n\n### 二维格子百分比计算 ###\n再来说3*2这种格子，假设图片横向平分3竖向平分2，即这张图可以存6个小标，这时background-size值是300%，而从左向右从上至下，background-position的值则为：0% 0%、50% 0%、100% 0%、100% 0%、100% 50%、100% 100%，现在有没有发现什么规律呢？\n\n开始上图了：![background-position百分比格子速记法效果图1](/public/img/1-160S01A420530.png)因为background-size的值的计算是实际展示区域的尺寸是没有关系，只跟这个格子与格子总长有关，所以这个值可以说一目了然，上图也有列出来，比如8格的，size的值就是800%。\n\n而且图中也有另外贴出每个格子相差的值，我自己感觉这个就是百分比格子计算的根本。\n\n### 异变 ###\n当然实际应用中可能会出现较特殊情况，例如本来规划的图标就是100像素x100像素，但是突然有个效果图中图标尺寸需要的是160x160，在不影响之前写好的代码和图标的情况下，有两种方法可以解决：\n```pre\n1. 图片整体放大1.6倍\n2. 尝试让这个图标占两格或多格(推荐)\n```\n方法1是最省事的，无需怎么计算，直接放大背景图将160px存放在单元格，但是不好的地方就是图片放大后占用的体积也会变大，反而不美。而方法2则需要用到下面说的较复杂（合并多格）的情况，但是在前期说的那些格子中并不是所有的格子都能满足条件，目前可以使用2格、4格、6格、9格、21格，继续看下面这张图吧~![background-position百分比格子速记法效果图2](/public/img/1-160S01A340309.png)写到这里就差不多了~不过我自己思考的可能会有一些缺陷没有发现的地方，欢迎童鞋讨论与指正~\n\n\n\n\n\n","slug":"background-position-percentage","published":1,"updated":"2017-05-23T06:26:22.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hswf000lxcv9tcvy8aq1","content":"<p>其实最近在做的APP项目中已经在开始重整代码，大部分图标也都打算使用iconfont里面的字体图标来完成，不过前期的页面还在更新当中，一时没办法放弃这种背景图片background-position百分比的方法，在做尝试的时候发现了这种格式速记的方法，比较省事的样子~</p>\n<h2 id=\"满足条件的格子有哪些？\"><a href=\"#满足条件的格子有哪些？\" class=\"headerlink\" title=\"满足条件的格子有哪些？\"></a>满足条件的格子有哪些？</h2><p>background-position百分比格子，首先满足条件的格子有<strong>1格，2格，3格，4格，5格，6格，9格，11格，21格</strong>，而这些格子可以横纵自己组合，目前我使用的是6*6的格子（我自己沉得这种格子满适用的），而11格和21格还没有用到只是类推出的结果，不过应该也大差不差~</p>\n<h3 id=\"一维格子百分比计算\"><a href=\"#一维格子百分比计算\" class=\"headerlink\" title=\"一维格子百分比计算\"></a>一维格子百分比计算</h3><p>1格比容简单这里就不说了，先从<strong>2x1的格子</strong>来说吧，假设图片默认里面是横排可以放两个图标（横向尺寸对半分），即2格，首先background-position竖向的值即可以写0%也可以写100%，而横向则有区别，第一个图标应是0%，第二个图标应是100%。这时的background-size值是200%，而你实际需要的尺寸则跟百分比是没有关系的。再说<strong>5x1的格子</strong>，即横向平分了5份，从左向右只说position百分比为：0%、25%、50%、75%、100%这五个值。background-size的值为500%;</p>\n<p>如果不明白的话不要捉急，后面我会画个图说明一下~</p>\n<h3 id=\"二维格子百分比计算\"><a href=\"#二维格子百分比计算\" class=\"headerlink\" title=\"二维格子百分比计算\"></a>二维格子百分比计算</h3><p>再来说3*2这种格子，假设图片横向平分3竖向平分2，即这张图可以存6个小标，这时background-size值是300%，而从左向右从上至下，background-position的值则为：0% 0%、50% 0%、100% 0%、100% 0%、100% 50%、100% 100%，现在有没有发现什么规律呢？</p>\n<p>开始上图了：<img src=\"/public/img/1-160S01A420530.png\" alt=\"background-position百分比格子速记法效果图1\">因为background-size的值的计算是实际展示区域的尺寸是没有关系，只跟这个格子与格子总长有关，所以这个值可以说一目了然，上图也有列出来，比如8格的，size的值就是800%。</p>\n<p>而且图中也有另外贴出每个格子相差的值，我自己感觉这个就是百分比格子计算的根本。</p>\n<h3 id=\"异变\"><a href=\"#异变\" class=\"headerlink\" title=\"异变\"></a>异变</h3><p>当然实际应用中可能会出现较特殊情况，例如本来规划的图标就是100像素x100像素，但是突然有个效果图中图标尺寸需要的是160x160，在不影响之前写好的代码和图标的情况下，有两种方法可以解决：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 图片整体放大1.6倍</div><div class=\"line\">2. 尝试让这个图标占两格或多格(推荐)</div></pre></td></tr></table></figure></p>\n<p>方法1是最省事的，无需怎么计算，直接放大背景图将160px存放在单元格，但是不好的地方就是图片放大后占用的体积也会变大，反而不美。而方法2则需要用到下面说的较复杂（合并多格）的情况，但是在前期说的那些格子中并不是所有的格子都能满足条件，目前可以使用2格、4格、6格、9格、21格，继续看下面这张图吧~<img src=\"/public/img/1-160S01A340309.png\" alt=\"background-position百分比格子速记法效果图2\">写到这里就差不多了~不过我自己思考的可能会有一些缺陷没有发现的地方，欢迎童鞋讨论与指正~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>其实最近在做的APP项目中已经在开始重整代码，大部分图标也都打算使用iconfont里面的字体图标来完成，不过前期的页面还在更新当中，一时没办法放弃这种背景图片background-position百分比的方法，在做尝试的时候发现了这种格式速记的方法，比较省事的样子~</p>\n<h2 id=\"满足条件的格子有哪些？\"><a href=\"#满足条件的格子有哪些？\" class=\"headerlink\" title=\"满足条件的格子有哪些？\"></a>满足条件的格子有哪些？</h2><p>background-position百分比格子，首先满足条件的格子有<strong>1格，2格，3格，4格，5格，6格，9格，11格，21格</strong>，而这些格子可以横纵自己组合，目前我使用的是6*6的格子（我自己沉得这种格子满适用的），而11格和21格还没有用到只是类推出的结果，不过应该也大差不差~</p>\n<h3 id=\"一维格子百分比计算\"><a href=\"#一维格子百分比计算\" class=\"headerlink\" title=\"一维格子百分比计算\"></a>一维格子百分比计算</h3><p>1格比容简单这里就不说了，先从<strong>2x1的格子</strong>来说吧，假设图片默认里面是横排可以放两个图标（横向尺寸对半分），即2格，首先background-position竖向的值即可以写0%也可以写100%，而横向则有区别，第一个图标应是0%，第二个图标应是100%。这时的background-size值是200%，而你实际需要的尺寸则跟百分比是没有关系的。再说<strong>5x1的格子</strong>，即横向平分了5份，从左向右只说position百分比为：0%、25%、50%、75%、100%这五个值。background-size的值为500%;</p>\n<p>如果不明白的话不要捉急，后面我会画个图说明一下~</p>\n<h3 id=\"二维格子百分比计算\"><a href=\"#二维格子百分比计算\" class=\"headerlink\" title=\"二维格子百分比计算\"></a>二维格子百分比计算</h3><p>再来说3*2这种格子，假设图片横向平分3竖向平分2，即这张图可以存6个小标，这时background-size值是300%，而从左向右从上至下，background-position的值则为：0% 0%、50% 0%、100% 0%、100% 0%、100% 50%、100% 100%，现在有没有发现什么规律呢？</p>\n<p>开始上图了：<img src=\"/public/img/1-160S01A420530.png\" alt=\"background-position百分比格子速记法效果图1\">因为background-size的值的计算是实际展示区域的尺寸是没有关系，只跟这个格子与格子总长有关，所以这个值可以说一目了然，上图也有列出来，比如8格的，size的值就是800%。</p>\n<p>而且图中也有另外贴出每个格子相差的值，我自己感觉这个就是百分比格子计算的根本。</p>\n<h3 id=\"异变\"><a href=\"#异变\" class=\"headerlink\" title=\"异变\"></a>异变</h3><p>当然实际应用中可能会出现较特殊情况，例如本来规划的图标就是100像素x100像素，但是突然有个效果图中图标尺寸需要的是160x160，在不影响之前写好的代码和图标的情况下，有两种方法可以解决：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 图片整体放大1.6倍</div><div class=\"line\">2. 尝试让这个图标占两格或多格(推荐)</div></pre></td></tr></table></figure></p>\n<p>方法1是最省事的，无需怎么计算，直接放大背景图将160px存放在单元格，但是不好的地方就是图片放大后占用的体积也会变大，反而不美。而方法2则需要用到下面说的较复杂（合并多格）的情况，但是在前期说的那些格子中并不是所有的格子都能满足条件，目前可以使用2格、4格、6格、9格、21格，继续看下面这张图吧~<img src=\"/public/img/1-160S01A340309.png\" alt=\"background-position百分比格子速记法效果图2\">写到这里就差不多了~不过我自己思考的可能会有一些缺陷没有发现的地方，欢迎童鞋讨论与指正~</p>\n"},{"title":"页面重构应注意的重绘和渲染","date":"2016-05-20T06:41:24.000Z","_content":"前端开发人员在页面重构中应该慎重考虑DOM操作，合理优化DOM的重绘（repaint）与重渲染（reflow）可以减轻客户浏览器的压力以及提高页面的性能，值得去学习交流。![页面重构应注意的重绘和渲染配图](/public/img/1-160612110S3250.jpg)网上看了一遍文章，感觉不错，所以拿过来分享一下，中间有些东西说得并不细，所以也加了一些东西。\n## 什么是repaint和reflow？ ##\n首先我们要知道一个页面由两部分组成：\n```pre\nDOM       描述该页面的结构\nrender    描述DOM节点(nodes)在页面上如何呈现\n```\n当DOM元素的属性发生变化(如color)时，浏览器会通知render重新描绘相应的元素，此过程称为repaint。\n\n如果该次变化涉及元素布局(如width)，浏览器则抛弃原有属性，重新计算并把结果传递给render以重新描绘页面元素，此过程称为reflow。\n\n这两个过程是很耗费浏览器性能的，从IE系列和Chrome渲染页面速度上的差距即可看出渲染引擎计算对应值和呈现并不一定高效，而每次对元素的操作都会发生repaints或reflow，因此编写DOM交互时如果不注意就会导致页面性能低下。\n\n页面渲染的过程如下：\n```pre\n1. 解析HTML代码并生成一个DOM树。\n\n2. 解析CSS文件，顺序为：浏览器默认样式->自定义样式->页面内的样式。\n\n3. 生成一个渲染树（render tree）。这个渲染树和DOM树的不同之处在于，它是受样式影响的。它不包括那些不可见的节点。\n\n4. 当渲染树生成之后，浏览器就会在屏幕上\"画\"出所有渲染树中的节点。\n ```\nPS:repaint和reflow，从名字就可以知道它们都有重新（再一次）的动作在里面，为什么会重新执行一次（N次）呢？如何减少、避免触发或只局部进行操作这个应该是我们学习的方向。\n\n## 什么情况下会触发浏览器的repaint/reflow? ##\n除了页面在首次加载时必然要经历该过程之外，还有以下行为会触发这个行为：\n```pre\n1. DOM元素的添加、修改（内容）、删除( Reflow + Repaint)\n2. 仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）\n3. 应用新的样式或者修改任何影响元素外观的属性\n4. Resize浏览器窗口、滚动页面\n5. 读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、 getComputedStyle()、currentStyle(in IE))\n```\n## 怎么优化？ ##\n（1）**避免在document上直接进行频繁的DOM操作**，如果确实需要可以采用off-document的方式进行，具体的方法包括但不完全包括以下几种：\n```pre\n1. 先将元素从document中删除，完成修改后再把元素放回原来的位置\n2. 将元素的display设置为\"none\"，完成修改后再把display修改为原来的值\n3. 如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document\n```\n例如：\n```pre\nvar fragment = document.createDocumentFragment();\nfragment.appendChild(document.createTextNode('keenboy test 111'));\nfragment.appendChild(document.createElement('br'));\nfragment.appendChild(document.createTextNode('keenboy test 222'));\ndocument.body.appendChild(fragment);\n```\n（2）**集中修改样式**\n\n```pre\n1. 尽可能少的修改元素style上的属性\n2. 尽量通过修改className来修改样式\n3. 通过cssText属性来设置样式值\n```\n例如：\n```pre\nelement.style.width=\"80px\";               //reflow\nelement.style.height=\"90px\";              //reflow\nelement.style.border=\"solid 1px red\";     //reflow\n//以上就产生多次reflow，调用的越多产生就越多\nelement.style.cssText=\"width:80px;height:80px;border:solid 1px red;\";     //reflow\n```\n（3）**缓存Layout属性值**\n\n\n对于Layout属性中非引用类型的值（数字型），如果需要多次访问则可以在一次访问时先存储到局部变量中，之后都使用局部变量，这样可以避免每次读取属性时造成浏览器的渲染。\n\n```pre\nvar left=elem.offsetLeft;      //多次使用left也就产生一次reflow\n```\n（4）**设置元素的position为absolute或fixed**\n\n在元素的position为static和relative时，元素处于DOM树结构当中，当对元素的某个操作需要重新渲染时，浏览器会渲染整个页 面。\n\n将元素的position设置为absolute和fixed可以使元素从DOM树结构中脱离出来独立的存在，而浏览器在需要渲染时只需要渲染该元素 以及位于该元素下方的元素，从而在某种程度上缩短浏览器渲染时间，这在当今越来越多的Javascript动画方面尤其值得考虑。\n\n（5）**权衡速度的平滑**\n\n比如实现一个动画，以1个像素为单位移动这样最平滑，但reflow就会过于频繁，CPU很快就会被完全占用。如果以3个像素为单位移动就会好很多。\n\n（6）**不要用tables布局**\n\n不要用tables布局的另一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素 reflow。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围\n\n（7）**不要在css里面写表达式**\n\n\n很多情况下都会触发reflow，如果css里有expression，每次都会重新计算一遍\n\n原文参考来源[点击查看](http://www.blueidea.com/tech/web/2011/8365.asp)","source":"_posts/repaint-and-reflow.md","raw":"---\ntitle: 页面重构应注意的重绘和渲染\ndate: 2016-05-20 14:41:24\ncategories:\n- 前端笔记\ntags:\n- 性能\n---\n前端开发人员在页面重构中应该慎重考虑DOM操作，合理优化DOM的重绘（repaint）与重渲染（reflow）可以减轻客户浏览器的压力以及提高页面的性能，值得去学习交流。![页面重构应注意的重绘和渲染配图](/public/img/1-160612110S3250.jpg)网上看了一遍文章，感觉不错，所以拿过来分享一下，中间有些东西说得并不细，所以也加了一些东西。\n## 什么是repaint和reflow？ ##\n首先我们要知道一个页面由两部分组成：\n```pre\nDOM       描述该页面的结构\nrender    描述DOM节点(nodes)在页面上如何呈现\n```\n当DOM元素的属性发生变化(如color)时，浏览器会通知render重新描绘相应的元素，此过程称为repaint。\n\n如果该次变化涉及元素布局(如width)，浏览器则抛弃原有属性，重新计算并把结果传递给render以重新描绘页面元素，此过程称为reflow。\n\n这两个过程是很耗费浏览器性能的，从IE系列和Chrome渲染页面速度上的差距即可看出渲染引擎计算对应值和呈现并不一定高效，而每次对元素的操作都会发生repaints或reflow，因此编写DOM交互时如果不注意就会导致页面性能低下。\n\n页面渲染的过程如下：\n```pre\n1. 解析HTML代码并生成一个DOM树。\n\n2. 解析CSS文件，顺序为：浏览器默认样式->自定义样式->页面内的样式。\n\n3. 生成一个渲染树（render tree）。这个渲染树和DOM树的不同之处在于，它是受样式影响的。它不包括那些不可见的节点。\n\n4. 当渲染树生成之后，浏览器就会在屏幕上\"画\"出所有渲染树中的节点。\n ```\nPS:repaint和reflow，从名字就可以知道它们都有重新（再一次）的动作在里面，为什么会重新执行一次（N次）呢？如何减少、避免触发或只局部进行操作这个应该是我们学习的方向。\n\n## 什么情况下会触发浏览器的repaint/reflow? ##\n除了页面在首次加载时必然要经历该过程之外，还有以下行为会触发这个行为：\n```pre\n1. DOM元素的添加、修改（内容）、删除( Reflow + Repaint)\n2. 仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）\n3. 应用新的样式或者修改任何影响元素外观的属性\n4. Resize浏览器窗口、滚动页面\n5. 读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、 getComputedStyle()、currentStyle(in IE))\n```\n## 怎么优化？ ##\n（1）**避免在document上直接进行频繁的DOM操作**，如果确实需要可以采用off-document的方式进行，具体的方法包括但不完全包括以下几种：\n```pre\n1. 先将元素从document中删除，完成修改后再把元素放回原来的位置\n2. 将元素的display设置为\"none\"，完成修改后再把display修改为原来的值\n3. 如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document\n```\n例如：\n```pre\nvar fragment = document.createDocumentFragment();\nfragment.appendChild(document.createTextNode('keenboy test 111'));\nfragment.appendChild(document.createElement('br'));\nfragment.appendChild(document.createTextNode('keenboy test 222'));\ndocument.body.appendChild(fragment);\n```\n（2）**集中修改样式**\n\n```pre\n1. 尽可能少的修改元素style上的属性\n2. 尽量通过修改className来修改样式\n3. 通过cssText属性来设置样式值\n```\n例如：\n```pre\nelement.style.width=\"80px\";               //reflow\nelement.style.height=\"90px\";              //reflow\nelement.style.border=\"solid 1px red\";     //reflow\n//以上就产生多次reflow，调用的越多产生就越多\nelement.style.cssText=\"width:80px;height:80px;border:solid 1px red;\";     //reflow\n```\n（3）**缓存Layout属性值**\n\n\n对于Layout属性中非引用类型的值（数字型），如果需要多次访问则可以在一次访问时先存储到局部变量中，之后都使用局部变量，这样可以避免每次读取属性时造成浏览器的渲染。\n\n```pre\nvar left=elem.offsetLeft;      //多次使用left也就产生一次reflow\n```\n（4）**设置元素的position为absolute或fixed**\n\n在元素的position为static和relative时，元素处于DOM树结构当中，当对元素的某个操作需要重新渲染时，浏览器会渲染整个页 面。\n\n将元素的position设置为absolute和fixed可以使元素从DOM树结构中脱离出来独立的存在，而浏览器在需要渲染时只需要渲染该元素 以及位于该元素下方的元素，从而在某种程度上缩短浏览器渲染时间，这在当今越来越多的Javascript动画方面尤其值得考虑。\n\n（5）**权衡速度的平滑**\n\n比如实现一个动画，以1个像素为单位移动这样最平滑，但reflow就会过于频繁，CPU很快就会被完全占用。如果以3个像素为单位移动就会好很多。\n\n（6）**不要用tables布局**\n\n不要用tables布局的另一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素 reflow。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围\n\n（7）**不要在css里面写表达式**\n\n\n很多情况下都会触发reflow，如果css里有expression，每次都会重新计算一遍\n\n原文参考来源[点击查看](http://www.blueidea.com/tech/web/2011/8365.asp)","slug":"repaint-and-reflow","published":1,"updated":"2017-05-23T06:23:27.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hswi000oxcv9qbehu98d","content":"<p>前端开发人员在页面重构中应该慎重考虑DOM操作，合理优化DOM的重绘（repaint）与重渲染（reflow）可以减轻客户浏览器的压力以及提高页面的性能，值得去学习交流。<img src=\"/public/img/1-160612110S3250.jpg\" alt=\"页面重构应注意的重绘和渲染配图\">网上看了一遍文章，感觉不错，所以拿过来分享一下，中间有些东西说得并不细，所以也加了一些东西。</p>\n<h2 id=\"什么是repaint和reflow？\"><a href=\"#什么是repaint和reflow？\" class=\"headerlink\" title=\"什么是repaint和reflow？\"></a>什么是repaint和reflow？</h2><p>首先我们要知道一个页面由两部分组成：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">DOM       描述该页面的结构</div><div class=\"line\">render    描述DOM节点(nodes)在页面上如何呈现</div></pre></td></tr></table></figure></p>\n<p>当DOM元素的属性发生变化(如color)时，浏览器会通知render重新描绘相应的元素，此过程称为repaint。</p>\n<p>如果该次变化涉及元素布局(如width)，浏览器则抛弃原有属性，重新计算并把结果传递给render以重新描绘页面元素，此过程称为reflow。</p>\n<p>这两个过程是很耗费浏览器性能的，从IE系列和Chrome渲染页面速度上的差距即可看出渲染引擎计算对应值和呈现并不一定高效，而每次对元素的操作都会发生repaints或reflow，因此编写DOM交互时如果不注意就会导致页面性能低下。</p>\n<p>页面渲染的过程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 解析HTML代码并生成一个DOM树。</div><div class=\"line\"></div><div class=\"line\">2. 解析CSS文件，顺序为：浏览器默认样式-&gt;自定义样式-&gt;页面内的样式。</div><div class=\"line\"></div><div class=\"line\">3. 生成一个渲染树（render tree）。这个渲染树和DOM树的不同之处在于，它是受样式影响的。它不包括那些不可见的节点。</div><div class=\"line\"></div><div class=\"line\">4. 当渲染树生成之后，浏览器就会在屏幕上&quot;画&quot;出所有渲染树中的节点。</div></pre></td></tr></table></figure></p>\n<p>PS:repaint和reflow，从名字就可以知道它们都有重新（再一次）的动作在里面，为什么会重新执行一次（N次）呢？如何减少、避免触发或只局部进行操作这个应该是我们学习的方向。</p>\n<h2 id=\"什么情况下会触发浏览器的repaint-reflow\"><a href=\"#什么情况下会触发浏览器的repaint-reflow\" class=\"headerlink\" title=\"什么情况下会触发浏览器的repaint/reflow?\"></a>什么情况下会触发浏览器的repaint/reflow?</h2><p>除了页面在首次加载时必然要经历该过程之外，还有以下行为会触发这个行为：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. DOM元素的添加、修改（内容）、删除( Reflow + Repaint)</div><div class=\"line\">2. 仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）</div><div class=\"line\">3. 应用新的样式或者修改任何影响元素外观的属性</div><div class=\"line\">4. Resize浏览器窗口、滚动页面</div><div class=\"line\">5. 读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、 getComputedStyle()、currentStyle(in IE))</div></pre></td></tr></table></figure></p>\n<h2 id=\"怎么优化？\"><a href=\"#怎么优化？\" class=\"headerlink\" title=\"怎么优化？\"></a>怎么优化？</h2><p>（1）<strong>避免在document上直接进行频繁的DOM操作</strong>，如果确实需要可以采用off-document的方式进行，具体的方法包括但不完全包括以下几种：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 先将元素从document中删除，完成修改后再把元素放回原来的位置</div><div class=\"line\">2. 将元素的display设置为&quot;none&quot;，完成修改后再把display修改为原来的值</div><div class=\"line\">3. 如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var fragment = document.createDocumentFragment();</div><div class=\"line\">fragment.appendChild(document.createTextNode(&apos;keenboy test 111&apos;));</div><div class=\"line\">fragment.appendChild(document.createElement(&apos;br&apos;));</div><div class=\"line\">fragment.appendChild(document.createTextNode(&apos;keenboy test 222&apos;));</div><div class=\"line\">document.body.appendChild(fragment);</div></pre></td></tr></table></figure></p>\n<p>（2）<strong>集中修改样式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 尽可能少的修改元素style上的属性</div><div class=\"line\">2. 尽量通过修改className来修改样式</div><div class=\"line\">3. 通过cssText属性来设置样式值</div></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">element.style.width=&quot;80px&quot;;               //reflow</div><div class=\"line\">element.style.height=&quot;90px&quot;;              //reflow</div><div class=\"line\">element.style.border=&quot;solid 1px red&quot;;     //reflow</div><div class=\"line\">//以上就产生多次reflow，调用的越多产生就越多</div><div class=\"line\">element.style.cssText=&quot;width:80px;height:80px;border:solid 1px red;&quot;;     //reflow</div></pre></td></tr></table></figure></p>\n<p>（3）<strong>缓存Layout属性值</strong></p>\n<p>对于Layout属性中非引用类型的值（数字型），如果需要多次访问则可以在一次访问时先存储到局部变量中，之后都使用局部变量，这样可以避免每次读取属性时造成浏览器的渲染。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var left=elem.offsetLeft;      //多次使用left也就产生一次reflow</div></pre></td></tr></table></figure>\n<p>（4）<strong>设置元素的position为absolute或fixed</strong></p>\n<p>在元素的position为static和relative时，元素处于DOM树结构当中，当对元素的某个操作需要重新渲染时，浏览器会渲染整个页 面。</p>\n<p>将元素的position设置为absolute和fixed可以使元素从DOM树结构中脱离出来独立的存在，而浏览器在需要渲染时只需要渲染该元素 以及位于该元素下方的元素，从而在某种程度上缩短浏览器渲染时间，这在当今越来越多的Javascript动画方面尤其值得考虑。</p>\n<p>（5）<strong>权衡速度的平滑</strong></p>\n<p>比如实现一个动画，以1个像素为单位移动这样最平滑，但reflow就会过于频繁，CPU很快就会被完全占用。如果以3个像素为单位移动就会好很多。</p>\n<p>（6）<strong>不要用tables布局</strong></p>\n<p>不要用tables布局的另一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素 reflow。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围</p>\n<p>（7）<strong>不要在css里面写表达式</strong></p>\n<p>很多情况下都会触发reflow，如果css里有expression，每次都会重新计算一遍</p>\n<p>原文参考来源<a href=\"http://www.blueidea.com/tech/web/2011/8365.asp\" target=\"_blank\" rel=\"external\">点击查看</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端开发人员在页面重构中应该慎重考虑DOM操作，合理优化DOM的重绘（repaint）与重渲染（reflow）可以减轻客户浏览器的压力以及提高页面的性能，值得去学习交流。<img src=\"/public/img/1-160612110S3250.jpg\" alt=\"页面重构应注意的重绘和渲染配图\">网上看了一遍文章，感觉不错，所以拿过来分享一下，中间有些东西说得并不细，所以也加了一些东西。</p>\n<h2 id=\"什么是repaint和reflow？\"><a href=\"#什么是repaint和reflow？\" class=\"headerlink\" title=\"什么是repaint和reflow？\"></a>什么是repaint和reflow？</h2><p>首先我们要知道一个页面由两部分组成：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">DOM       描述该页面的结构</div><div class=\"line\">render    描述DOM节点(nodes)在页面上如何呈现</div></pre></td></tr></table></figure></p>\n<p>当DOM元素的属性发生变化(如color)时，浏览器会通知render重新描绘相应的元素，此过程称为repaint。</p>\n<p>如果该次变化涉及元素布局(如width)，浏览器则抛弃原有属性，重新计算并把结果传递给render以重新描绘页面元素，此过程称为reflow。</p>\n<p>这两个过程是很耗费浏览器性能的，从IE系列和Chrome渲染页面速度上的差距即可看出渲染引擎计算对应值和呈现并不一定高效，而每次对元素的操作都会发生repaints或reflow，因此编写DOM交互时如果不注意就会导致页面性能低下。</p>\n<p>页面渲染的过程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 解析HTML代码并生成一个DOM树。</div><div class=\"line\"></div><div class=\"line\">2. 解析CSS文件，顺序为：浏览器默认样式-&gt;自定义样式-&gt;页面内的样式。</div><div class=\"line\"></div><div class=\"line\">3. 生成一个渲染树（render tree）。这个渲染树和DOM树的不同之处在于，它是受样式影响的。它不包括那些不可见的节点。</div><div class=\"line\"></div><div class=\"line\">4. 当渲染树生成之后，浏览器就会在屏幕上&quot;画&quot;出所有渲染树中的节点。</div></pre></td></tr></table></figure></p>\n<p>PS:repaint和reflow，从名字就可以知道它们都有重新（再一次）的动作在里面，为什么会重新执行一次（N次）呢？如何减少、避免触发或只局部进行操作这个应该是我们学习的方向。</p>\n<h2 id=\"什么情况下会触发浏览器的repaint-reflow\"><a href=\"#什么情况下会触发浏览器的repaint-reflow\" class=\"headerlink\" title=\"什么情况下会触发浏览器的repaint/reflow?\"></a>什么情况下会触发浏览器的repaint/reflow?</h2><p>除了页面在首次加载时必然要经历该过程之外，还有以下行为会触发这个行为：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. DOM元素的添加、修改（内容）、删除( Reflow + Repaint)</div><div class=\"line\">2. 仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）</div><div class=\"line\">3. 应用新的样式或者修改任何影响元素外观的属性</div><div class=\"line\">4. Resize浏览器窗口、滚动页面</div><div class=\"line\">5. 读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、 getComputedStyle()、currentStyle(in IE))</div></pre></td></tr></table></figure></p>\n<h2 id=\"怎么优化？\"><a href=\"#怎么优化？\" class=\"headerlink\" title=\"怎么优化？\"></a>怎么优化？</h2><p>（1）<strong>避免在document上直接进行频繁的DOM操作</strong>，如果确实需要可以采用off-document的方式进行，具体的方法包括但不完全包括以下几种：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 先将元素从document中删除，完成修改后再把元素放回原来的位置</div><div class=\"line\">2. 将元素的display设置为&quot;none&quot;，完成修改后再把display修改为原来的值</div><div class=\"line\">3. 如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var fragment = document.createDocumentFragment();</div><div class=\"line\">fragment.appendChild(document.createTextNode(&apos;keenboy test 111&apos;));</div><div class=\"line\">fragment.appendChild(document.createElement(&apos;br&apos;));</div><div class=\"line\">fragment.appendChild(document.createTextNode(&apos;keenboy test 222&apos;));</div><div class=\"line\">document.body.appendChild(fragment);</div></pre></td></tr></table></figure></p>\n<p>（2）<strong>集中修改样式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1. 尽可能少的修改元素style上的属性</div><div class=\"line\">2. 尽量通过修改className来修改样式</div><div class=\"line\">3. 通过cssText属性来设置样式值</div></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">element.style.width=&quot;80px&quot;;               //reflow</div><div class=\"line\">element.style.height=&quot;90px&quot;;              //reflow</div><div class=\"line\">element.style.border=&quot;solid 1px red&quot;;     //reflow</div><div class=\"line\">//以上就产生多次reflow，调用的越多产生就越多</div><div class=\"line\">element.style.cssText=&quot;width:80px;height:80px;border:solid 1px red;&quot;;     //reflow</div></pre></td></tr></table></figure></p>\n<p>（3）<strong>缓存Layout属性值</strong></p>\n<p>对于Layout属性中非引用类型的值（数字型），如果需要多次访问则可以在一次访问时先存储到局部变量中，之后都使用局部变量，这样可以避免每次读取属性时造成浏览器的渲染。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">var left=elem.offsetLeft;      //多次使用left也就产生一次reflow</div></pre></td></tr></table></figure>\n<p>（4）<strong>设置元素的position为absolute或fixed</strong></p>\n<p>在元素的position为static和relative时，元素处于DOM树结构当中，当对元素的某个操作需要重新渲染时，浏览器会渲染整个页 面。</p>\n<p>将元素的position设置为absolute和fixed可以使元素从DOM树结构中脱离出来独立的存在，而浏览器在需要渲染时只需要渲染该元素 以及位于该元素下方的元素，从而在某种程度上缩短浏览器渲染时间，这在当今越来越多的Javascript动画方面尤其值得考虑。</p>\n<p>（5）<strong>权衡速度的平滑</strong></p>\n<p>比如实现一个动画，以1个像素为单位移动这样最平滑，但reflow就会过于频繁，CPU很快就会被完全占用。如果以3个像素为单位移动就会好很多。</p>\n<p>（6）<strong>不要用tables布局</strong></p>\n<p>不要用tables布局的另一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素 reflow。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围</p>\n<p>（7）<strong>不要在css里面写表达式</strong></p>\n<p>很多情况下都会触发reflow，如果css里有expression，每次都会重新计算一遍</p>\n<p>原文参考来源<a href=\"http://www.blueidea.com/tech/web/2011/8365.asp\" target=\"_blank\" rel=\"external\">点击查看</a></p>\n"},{"title":"vue2使用axios代替vue-resource","date":"2017-03-09T07:18:12.000Z","_content":"终于将vue-resource替换成axios了，其中像application/x-www-form-urlencoded发送的头信息以及返回的response结果这两点都需要注意一下。![vue2使用axios代替vue-resource说明图](/public/img/1-1F310102229205.png)\n其实[axios官方](https://github.com/mzabriskie/axios)也有说明。因为我在vue-resource中使用了\n```js\nVue.http.options.emulateJSON = true;\n```\n这种请求在发送头信息时会将Content-Type改为application/x-www-form-urlencoded，而若使用axios的话，为了达到这种效果作者提供了两种方法。\n\n第一种使用new URLSearchParams()，但是这种方法兼容有点不好。所以我使用的是第二种方法，使用node_modules文件夹中的qs模块。因为我之前已经将ajax请求稍微封装了一下（下面说的代码基本都是在ajax.js中添加的），所以改动其实真不多。\n\n安装axios模块就不说了，先将axios和qs引用进来。\n```js\nimport axios from 'axios';\nimport qs from 'qs';\n```\n然后将发送的请求参数外面使用qs.stringify进行包裹。\n```js\nqs.stringify( data )\n```\n最后将接受的结果，提取正确的字段。（在vue-resource中正文件是response.body，而在axios中正文则是response.data。这个需要注意一下）\t\n```js\nconsole.log(response.data)     //这个打印出来的就是返回的结果\n```\n其中response中则有一些请求状态等等相关的参数，我这边很少用到，所以就不列出来了。只需上面三步，就完成了vue-resource到axios的转换。同时解决了axios发送x-www-form-urlencoded的需求，特别方便吧~\n\n另外贴上我整个ajax.js文件，中间用到了加密解密，可以无视一下。\n```js\nimport Vue from 'vue';\nimport axios from 'axios';\nimport qs from 'qs';\n \n//导入数据加密方法\nimport secretJS from './secret';\n \n//当前运行环境\nvar domain = 'XXX';\n \n//封装ajax\nvar ajax = {\n  //通用的ajax-post\n  common:function(url,data,sucFn,secret,errFn){\n    //param说明\n    //@url    ajax访问的url\n    //@data    post发送的数据\n    //@sucFn  ajax成功时运行函数\n    //@errFn  ajax失败时运行函数(大部分为缺省，但例如登录出错时则需要)\n \n    //发送ajax\n    axios.post(domain + url , qs.stringify(secretJS.reData(data,secret)) ).then(\n      (response) => {\n        //先判断appId是否已经过期\n        if(response.data != 'appId not exist'){\n          //解密数据\n          var rs = JSON.parse(secretJS.backSecret(response.data,secret));\n          //如果\n          if(rs.success == true)  sucFn(rs);\n          else{\n            if(errFn === undefined){\n              //(退出登录或私钥+ID丢失)后访问页面-提示过期\n              this.$router.push('/expired');\n            }else{\n              errFn(rs);\n            }\n          }\n        }else{\n          //否则跳转到温馨提示登录过期页面\n          this.$router.push('/login');\n        }\n      }\n    )\n    //ajax完成\n  }\n}\n \nexport default ajax;\n```\n可以完善的地方还有很多，欢迎拍砖~","source":"_posts/vue2-uses-axios-instead-resource.md","raw":"---\ntitle: vue2使用axios代替vue-resource\ndate: 2017-03-09 15:18:12\ncategories:\n- 前端笔记\ntags:\n- VUE\n---\n终于将vue-resource替换成axios了，其中像application/x-www-form-urlencoded发送的头信息以及返回的response结果这两点都需要注意一下。![vue2使用axios代替vue-resource说明图](/public/img/1-1F310102229205.png)\n其实[axios官方](https://github.com/mzabriskie/axios)也有说明。因为我在vue-resource中使用了\n```js\nVue.http.options.emulateJSON = true;\n```\n这种请求在发送头信息时会将Content-Type改为application/x-www-form-urlencoded，而若使用axios的话，为了达到这种效果作者提供了两种方法。\n\n第一种使用new URLSearchParams()，但是这种方法兼容有点不好。所以我使用的是第二种方法，使用node_modules文件夹中的qs模块。因为我之前已经将ajax请求稍微封装了一下（下面说的代码基本都是在ajax.js中添加的），所以改动其实真不多。\n\n安装axios模块就不说了，先将axios和qs引用进来。\n```js\nimport axios from 'axios';\nimport qs from 'qs';\n```\n然后将发送的请求参数外面使用qs.stringify进行包裹。\n```js\nqs.stringify( data )\n```\n最后将接受的结果，提取正确的字段。（在vue-resource中正文件是response.body，而在axios中正文则是response.data。这个需要注意一下）\t\n```js\nconsole.log(response.data)     //这个打印出来的就是返回的结果\n```\n其中response中则有一些请求状态等等相关的参数，我这边很少用到，所以就不列出来了。只需上面三步，就完成了vue-resource到axios的转换。同时解决了axios发送x-www-form-urlencoded的需求，特别方便吧~\n\n另外贴上我整个ajax.js文件，中间用到了加密解密，可以无视一下。\n```js\nimport Vue from 'vue';\nimport axios from 'axios';\nimport qs from 'qs';\n \n//导入数据加密方法\nimport secretJS from './secret';\n \n//当前运行环境\nvar domain = 'XXX';\n \n//封装ajax\nvar ajax = {\n  //通用的ajax-post\n  common:function(url,data,sucFn,secret,errFn){\n    //param说明\n    //@url    ajax访问的url\n    //@data    post发送的数据\n    //@sucFn  ajax成功时运行函数\n    //@errFn  ajax失败时运行函数(大部分为缺省，但例如登录出错时则需要)\n \n    //发送ajax\n    axios.post(domain + url , qs.stringify(secretJS.reData(data,secret)) ).then(\n      (response) => {\n        //先判断appId是否已经过期\n        if(response.data != 'appId not exist'){\n          //解密数据\n          var rs = JSON.parse(secretJS.backSecret(response.data,secret));\n          //如果\n          if(rs.success == true)  sucFn(rs);\n          else{\n            if(errFn === undefined){\n              //(退出登录或私钥+ID丢失)后访问页面-提示过期\n              this.$router.push('/expired');\n            }else{\n              errFn(rs);\n            }\n          }\n        }else{\n          //否则跳转到温馨提示登录过期页面\n          this.$router.push('/login');\n        }\n      }\n    )\n    //ajax完成\n  }\n}\n \nexport default ajax;\n```\n可以完善的地方还有很多，欢迎拍砖~","slug":"vue2-uses-axios-instead-resource","published":1,"updated":"2017-05-23T06:23:33.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hswk000rxcv9np7ssseb","content":"<p>终于将vue-resource替换成axios了，其中像application/x-www-form-urlencoded发送的头信息以及返回的response结果这两点都需要注意一下。<img src=\"/public/img/1-1F310102229205.png\" alt=\"vue2使用axios代替vue-resource说明图\"><br>其实<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios官方</a>也有说明。因为我在vue-resource中使用了<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.http.options.emulateJSON = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure></p>\n<p>这种请求在发送头信息时会将Content-Type改为application/x-www-form-urlencoded，而若使用axios的话，为了达到这种效果作者提供了两种方法。</p>\n<p>第一种使用new URLSearchParams()，但是这种方法兼容有点不好。所以我使用的是第二种方法，使用node_modules文件夹中的qs模块。因为我之前已经将ajax请求稍微封装了一下（下面说的代码基本都是在ajax.js中添加的），所以改动其实真不多。</p>\n<p>安装axios模块就不说了，先将axios和qs引用进来。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span>;</div></pre></td></tr></table></figure></p>\n<p>然后将发送的请求参数外面使用qs.stringify进行包裹。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">qs.stringify( data )</div></pre></td></tr></table></figure></p>\n<p>最后将接受的结果，提取正确的字段。（在vue-resource中正文件是response.body，而在axios中正文则是response.data。这个需要注意一下）<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(response.data)     <span class=\"comment\">//这个打印出来的就是返回的结果</span></div></pre></td></tr></table></figure></p>\n<p>其中response中则有一些请求状态等等相关的参数，我这边很少用到，所以就不列出来了。只需上面三步，就完成了vue-resource到axios的转换。同时解决了axios发送x-www-form-urlencoded的需求，特别方便吧~</p>\n<p>另外贴上我整个ajax.js文件，中间用到了加密解密，可以无视一下。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//导入数据加密方法</span></div><div class=\"line\"><span class=\"keyword\">import</span> secretJS <span class=\"keyword\">from</span> <span class=\"string\">'./secret'</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//当前运行环境</span></div><div class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"string\">'XXX'</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//封装ajax</span></div><div class=\"line\"><span class=\"keyword\">var</span> ajax = &#123;</div><div class=\"line\">  <span class=\"comment\">//通用的ajax-post</span></div><div class=\"line\">  common:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url,data,sucFn,secret,errFn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//param说明</span></div><div class=\"line\">    <span class=\"comment\">//@url    ajax访问的url</span></div><div class=\"line\">    <span class=\"comment\">//@data    post发送的数据</span></div><div class=\"line\">    <span class=\"comment\">//@sucFn  ajax成功时运行函数</span></div><div class=\"line\">    <span class=\"comment\">//@errFn  ajax失败时运行函数(大部分为缺省，但例如登录出错时则需要)</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//发送ajax</span></div><div class=\"line\">    axios.post(domain + url , qs.stringify(secretJS.reData(data,secret)) ).then(</div><div class=\"line\">      <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//先判断appId是否已经过期</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(response.data != <span class=\"string\">'appId not exist'</span>)&#123;</div><div class=\"line\">          <span class=\"comment\">//解密数据</span></div><div class=\"line\">          <span class=\"keyword\">var</span> rs = <span class=\"built_in\">JSON</span>.parse(secretJS.backSecret(response.data,secret));</div><div class=\"line\">          <span class=\"comment\">//如果</span></div><div class=\"line\">          <span class=\"keyword\">if</span>(rs.success == <span class=\"literal\">true</span>)  sucFn(rs);</div><div class=\"line\">          <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(errFn === <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">              <span class=\"comment\">//(退出登录或私钥+ID丢失)后访问页面-提示过期</span></div><div class=\"line\">              <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">'/expired'</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              errFn(rs);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          <span class=\"comment\">//否则跳转到温馨提示登录过期页面</span></div><div class=\"line\">          <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">'/login'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"comment\">//ajax完成</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ajax;</div></pre></td></tr></table></figure></p>\n<p>可以完善的地方还有很多，欢迎拍砖~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于将vue-resource替换成axios了，其中像application/x-www-form-urlencoded发送的头信息以及返回的response结果这两点都需要注意一下。<img src=\"/public/img/1-1F310102229205.png\" alt=\"vue2使用axios代替vue-resource说明图\"><br>其实<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios官方</a>也有说明。因为我在vue-resource中使用了<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">Vue.http.options.emulateJSON = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure></p>\n<p>这种请求在发送头信息时会将Content-Type改为application/x-www-form-urlencoded，而若使用axios的话，为了达到这种效果作者提供了两种方法。</p>\n<p>第一种使用new URLSearchParams()，但是这种方法兼容有点不好。所以我使用的是第二种方法，使用node_modules文件夹中的qs模块。因为我之前已经将ajax请求稍微封装了一下（下面说的代码基本都是在ajax.js中添加的），所以改动其实真不多。</p>\n<p>安装axios模块就不说了，先将axios和qs引用进来。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span>;</div></pre></td></tr></table></figure></p>\n<p>然后将发送的请求参数外面使用qs.stringify进行包裹。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\">qs.stringify( data )</div></pre></td></tr></table></figure></p>\n<p>最后将接受的结果，提取正确的字段。（在vue-resource中正文件是response.body，而在axios中正文则是response.data。这个需要注意一下）<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(response.data)     <span class=\"comment\">//这个打印出来的就是返回的结果</span></div></pre></td></tr></table></figure></p>\n<p>其中response中则有一些请求状态等等相关的参数，我这边很少用到，所以就不列出来了。只需上面三步，就完成了vue-resource到axios的转换。同时解决了axios发送x-www-form-urlencoded的需求，特别方便吧~</p>\n<p>另外贴上我整个ajax.js文件，中间用到了加密解密，可以无视一下。<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//导入数据加密方法</span></div><div class=\"line\"><span class=\"keyword\">import</span> secretJS <span class=\"keyword\">from</span> <span class=\"string\">'./secret'</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//当前运行环境</span></div><div class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"string\">'XXX'</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//封装ajax</span></div><div class=\"line\"><span class=\"keyword\">var</span> ajax = &#123;</div><div class=\"line\">  <span class=\"comment\">//通用的ajax-post</span></div><div class=\"line\">  common:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url,data,sucFn,secret,errFn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//param说明</span></div><div class=\"line\">    <span class=\"comment\">//@url    ajax访问的url</span></div><div class=\"line\">    <span class=\"comment\">//@data    post发送的数据</span></div><div class=\"line\">    <span class=\"comment\">//@sucFn  ajax成功时运行函数</span></div><div class=\"line\">    <span class=\"comment\">//@errFn  ajax失败时运行函数(大部分为缺省，但例如登录出错时则需要)</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//发送ajax</span></div><div class=\"line\">    axios.post(domain + url , qs.stringify(secretJS.reData(data,secret)) ).then(</div><div class=\"line\">      <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//先判断appId是否已经过期</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(response.data != <span class=\"string\">'appId not exist'</span>)&#123;</div><div class=\"line\">          <span class=\"comment\">//解密数据</span></div><div class=\"line\">          <span class=\"keyword\">var</span> rs = <span class=\"built_in\">JSON</span>.parse(secretJS.backSecret(response.data,secret));</div><div class=\"line\">          <span class=\"comment\">//如果</span></div><div class=\"line\">          <span class=\"keyword\">if</span>(rs.success == <span class=\"literal\">true</span>)  sucFn(rs);</div><div class=\"line\">          <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(errFn === <span class=\"literal\">undefined</span>)&#123;</div><div class=\"line\">              <span class=\"comment\">//(退出登录或私钥+ID丢失)后访问页面-提示过期</span></div><div class=\"line\">              <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">'/expired'</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              errFn(rs);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          <span class=\"comment\">//否则跳转到温馨提示登录过期页面</span></div><div class=\"line\">          <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">'/login'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    )</div><div class=\"line\">    <span class=\"comment\">//ajax完成</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ajax;</div></pre></td></tr></table></figure></p>\n<p>可以完善的地方还有很多，欢迎拍砖~</p>\n"},{"title":"纯CSS让footer固定在页面底部","date":"2017-05-02T08:06:52.000Z","_content":"纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。![纯CSS让footer固定在页面底部效果图](/public/img/1-1F5021I6400-L.gif)前段时间做react-demo的时候，遇到过这个CSS-Sticky-Footer的问题，当时因为底部并不是在body下面的，所以没有做起来，只用了响应式的让它浮在底部，而在小屏幕时让它跟随在内容下边。这次正好群里面有小伙伴也在弄这个，所以我就把demo做了一下，纯CSS实现（兼容IE比较差，用了伪类和min-height）。具体代码如下：\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>让footer固定在页面底部</title>\n    <style>\n      html,body,div,p {\n        padding: 0;\n        margin: 0;\n      }\n      html {\n        height: 100%;\n      }\n      body {\n        position: relative;\n        min-height: 100%;\n      }\n      body:after {\n        content: '';\n        display: block;\n        height: 150px;\n      }\n      .foot {\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        line-height: 150px;\n        text-align: center;\n        color: #fff;\n        font-size: 48px;\n        background: #222;\n      }\n      \n      h3 {\n        font-size: 75px;\n        margin: 0;\n      }\n      p {\n        font-size: 24px;\n        line-height: 40px;\n        padding-top: 32px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <h3>CSS-Sticky-Footer</h3>\n      <h3>让footer固定在页面底部</h3>\n      <p>纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。</p>\n      <p>实现CSS-Sticky-Footer的效果</p>\n      <p>1</p>\n      <p>2</p>\n      <p>3</p>\n      <p>4</p>\n      <p>5</p>\n      <p>6</p>\n      <p>7</p>\n      <p>8</p>\n      <p>9</p>\n      <p>10</p>\n      <p>11</p>\n      <p>12</p>\n      <p>13</p>\n      <p>14</p>\n      <p>15</p>\n      <p>16</p>\n      <p>17</p>\n      <p>18</p>\n      <p>最后一行</p>\n    </div>\n    <div class=\"foot\">这是底部</div>\n  </body>\n</html>\n```\n需要注意的两点就是：\n1. foot需要直接在body中，它们是父与子的关系\n2. body的after伪类高度需要与foot一致\n\n因为foot是使用的absolute相较与body的定位，所以在给body设置“min-height:100%;”而foot设置“bottom:0”后，当body内容不够一屏时，body有min-height,能够保持foot的底部位置，当超过一屏时，就会跟随在box内容后面了。同时body的after伪类很好的将它们在底部分做了一个区分，而不会重叠。\n","source":"_posts/css-sticky-footer.md","raw":"---\ntitle: 纯CSS让footer固定在页面底部\ndate: 2017-05-02 16:06:52\ncategories:\n- 前端笔记\ntags:\n- CSS\n---\n纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。![纯CSS让footer固定在页面底部效果图](/public/img/1-1F5021I6400-L.gif)前段时间做react-demo的时候，遇到过这个CSS-Sticky-Footer的问题，当时因为底部并不是在body下面的，所以没有做起来，只用了响应式的让它浮在底部，而在小屏幕时让它跟随在内容下边。这次正好群里面有小伙伴也在弄这个，所以我就把demo做了一下，纯CSS实现（兼容IE比较差，用了伪类和min-height）。具体代码如下：\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>让footer固定在页面底部</title>\n    <style>\n      html,body,div,p {\n        padding: 0;\n        margin: 0;\n      }\n      html {\n        height: 100%;\n      }\n      body {\n        position: relative;\n        min-height: 100%;\n      }\n      body:after {\n        content: '';\n        display: block;\n        height: 150px;\n      }\n      .foot {\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        line-height: 150px;\n        text-align: center;\n        color: #fff;\n        font-size: 48px;\n        background: #222;\n      }\n      \n      h3 {\n        font-size: 75px;\n        margin: 0;\n      }\n      p {\n        font-size: 24px;\n        line-height: 40px;\n        padding-top: 32px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"box\">\n      <h3>CSS-Sticky-Footer</h3>\n      <h3>让footer固定在页面底部</h3>\n      <p>纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。</p>\n      <p>实现CSS-Sticky-Footer的效果</p>\n      <p>1</p>\n      <p>2</p>\n      <p>3</p>\n      <p>4</p>\n      <p>5</p>\n      <p>6</p>\n      <p>7</p>\n      <p>8</p>\n      <p>9</p>\n      <p>10</p>\n      <p>11</p>\n      <p>12</p>\n      <p>13</p>\n      <p>14</p>\n      <p>15</p>\n      <p>16</p>\n      <p>17</p>\n      <p>18</p>\n      <p>最后一行</p>\n    </div>\n    <div class=\"foot\">这是底部</div>\n  </body>\n</html>\n```\n需要注意的两点就是：\n1. foot需要直接在body中，它们是父与子的关系\n2. body的after伪类高度需要与foot一致\n\n因为foot是使用的absolute相较与body的定位，所以在给body设置“min-height:100%;”而foot设置“bottom:0”后，当body内容不够一屏时，body有min-height,能够保持foot的底部位置，当超过一屏时，就会跟随在box内容后面了。同时body的after伪类很好的将它们在底部分做了一个区分，而不会重叠。\n","slug":"css-sticky-footer","published":1,"updated":"2017-05-23T06:24:42.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj316hswo000vxcv9ropirof6","content":"<p>纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。<img src=\"/public/img/1-1F5021I6400-L.gif\" alt=\"纯CSS让footer固定在页面底部效果图\">前段时间做react-demo的时候，遇到过这个CSS-Sticky-Footer的问题，当时因为底部并不是在body下面的，所以没有做起来，只用了响应式的让它浮在底部，而在小屏幕时让它跟随在内容下边。这次正好群里面有小伙伴也在弄这个，所以我就把demo做了一下，纯CSS实现（兼容IE比较差，用了伪类和min-height）。具体代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>让footer固定在页面底部<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">      <span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"attribute\">display</span>: block;</div><div class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-class\">.foot</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">150px</span>;</div><div class=\"line\">        <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">48px</span>;</div><div class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#222</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"selector-tag\">h3</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">75px</span>;</div><div class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">        <span class=\"attribute\">padding-top</span>: <span class=\"number\">32px</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>CSS-Sticky-Footer<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>让footer固定在页面底部<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>实现CSS-Sticky-Footer的效果<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>12<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>最后一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foot\"</span>&gt;</span>这是底部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>需要注意的两点就是：</p>\n<ol>\n<li>foot需要直接在body中，它们是父与子的关系</li>\n<li>body的after伪类高度需要与foot一致</li>\n</ol>\n<p>因为foot是使用的absolute相较与body的定位，所以在给body设置“min-height:100%;”而foot设置“bottom:0”后，当body内容不够一屏时，body有min-height,能够保持foot的底部位置，当超过一屏时，就会跟随在box内容后面了。同时body的after伪类很好的将它们在底部分做了一个区分，而不会重叠。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。<img src=\"/public/img/1-1F5021I6400-L.gif\" alt=\"纯CSS让footer固定在页面底部效果图\">前段时间做react-demo的时候，遇到过这个CSS-Sticky-Footer的问题，当时因为底部并不是在body下面的，所以没有做起来，只用了响应式的让它浮在底部，而在小屏幕时让它跟随在内容下边。这次正好群里面有小伙伴也在弄这个，所以我就把demo做了一下，纯CSS实现（兼容IE比较差，用了伪类和min-height）。具体代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>让footer固定在页面底部<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">      <span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">div</span>,<span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">        <span class=\"attribute\">min-height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"attribute\">display</span>: block;</div><div class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-class\">.foot</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">150px</span>;</div><div class=\"line\">        <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">48px</span>;</div><div class=\"line\">        <span class=\"attribute\">background</span>: <span class=\"number\">#222</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"selector-tag\">h3</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">75px</span>;</div><div class=\"line\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">        <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">        <span class=\"attribute\">padding-top</span>: <span class=\"number\">32px</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>CSS-Sticky-Footer<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>让footer固定在页面底部<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>纯CSS实现让footer固定在底部，当内容不够一屏时固定在屏幕底部，当内容超出一屏时则跟随在内容底部。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>实现CSS-Sticky-Footer的效果<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>12<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>最后一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"foot\"</span>&gt;</span>这是底部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>需要注意的两点就是：</p>\n<ol>\n<li>foot需要直接在body中，它们是父与子的关系</li>\n<li>body的after伪类高度需要与foot一致</li>\n</ol>\n<p>因为foot是使用的absolute相较与body的定位，所以在给body设置“min-height:100%;”而foot设置“bottom:0”后，当body内容不够一屏时，body有min-height,能够保持foot的底部位置，当超过一屏时，就会跟随在box内容后面了。同时body的after伪类很好的将它们在底部分做了一个区分，而不会重叠。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj316hsvy0005xcv9nuzcb70z","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hsw6000bxcv9p1bt4uf0"},{"post_id":"cj316hsvk0000xcv9frlpzee7","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswb000gxcv9h87toael"},{"post_id":"cj316hsw10006xcv9rxhyxtum","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswe000jxcv9hcfpbbuo"},{"post_id":"cj316hsw3000axcv95toxz04u","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswh000nxcv9qlafo4p6"},{"post_id":"cj316hsvp0001xcv989yrvhuc","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswj000qxcv90v352ljq"},{"post_id":"cj316hsw8000dxcv98ir399ec","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswo000uxcv9l5oe40wj"},{"post_id":"cj316hswd000ixcv9keqss5tg","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswq000xxcv9tapvicxf"},{"post_id":"cj316hsvv0004xcv9se8936qr","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswr000zxcv9at7lt8g6"},{"post_id":"cj316hswf000lxcv9tcvy8aq1","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hsws0012xcv9jd1hn1ba"},{"post_id":"cj316hswi000oxcv9qbehu98d","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswt0013xcv9uelqepj5"},{"post_id":"cj316hswk000rxcv9np7ssseb","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hsww0015xcv9ytvyk8h5"},{"post_id":"cj316hswo000vxcv9ropirof6","category_id":"cj316hsvs0002xcv9ymuqnese","_id":"cj316hswz0017xcv9lmd9j5io"}],"PostTag":[{"post_id":"cj316hsvk0000xcv9frlpzee7","tag_id":"cj316hsvv0003xcv9dgg48neq","_id":"cj316hsw30009xcv9ba6rp63o"},{"post_id":"cj316hsw10006xcv9rxhyxtum","tag_id":"cj316hsvv0003xcv9dgg48neq","_id":"cj316hsw7000cxcv9e0dk7ouo"},{"post_id":"cj316hsw3000axcv95toxz04u","tag_id":"cj316hsvv0003xcv9dgg48neq","_id":"cj316hswb000hxcv9fbu36qvs"},{"post_id":"cj316hsvp0001xcv989yrvhuc","tag_id":"cj316hsw20008xcv90xctrzkd","_id":"cj316hswf000kxcv9rj807tkc"},{"post_id":"cj316hsvv0004xcv9se8936qr","tag_id":"cj316hsw20008xcv90xctrzkd","_id":"cj316hswj000pxcv927ar9i98"},{"post_id":"cj316hswf000lxcv9tcvy8aq1","tag_id":"cj316hsw20008xcv90xctrzkd","_id":"cj316hswm000sxcv97h83vdxs"},{"post_id":"cj316hsvy0005xcv9nuzcb70z","tag_id":"cj316hswg000mxcv978hxmu9n","_id":"cj316hswq000wxcv9mex58pdd"},{"post_id":"cj316hswo000vxcv9ropirof6","tag_id":"cj316hsw20008xcv90xctrzkd","_id":"cj316hswr000yxcv950wnbjm9"},{"post_id":"cj316hsw8000dxcv98ir399ec","tag_id":"cj316hswn000txcv9rripepcj","_id":"cj316hsws0011xcv9nvj6s02n"},{"post_id":"cj316hswd000ixcv9keqss5tg","tag_id":"cj316hswr0010xcv93az350n6","_id":"cj316hsww0016xcv9bkfb60by"},{"post_id":"cj316hswi000oxcv9qbehu98d","tag_id":"cj316hswu0014xcv9vzkf0z85","_id":"cj316hsx00019xcv9ppaqfulv"},{"post_id":"cj316hswk000rxcv9np7ssseb","tag_id":"cj316hswn000txcv9rripepcj","_id":"cj316hsx1001axcv9ql85jno9"}],"Tag":[{"name":"JS","_id":"cj316hsvv0003xcv9dgg48neq"},{"name":"CSS","_id":"cj316hsw20008xcv90xctrzkd"},{"name":"逻辑","_id":"cj316hswg000mxcv978hxmu9n"},{"name":"VUE","_id":"cj316hswn000txcv9rripepcj"},{"name":"PS","_id":"cj316hswr0010xcv93az350n6"},{"name":"性能","_id":"cj316hswu0014xcv9vzkf0z85"}]}}